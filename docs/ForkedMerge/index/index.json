{"includedArchiveIdentifiers":["ForkedMerge"],"interfaceLanguages":{"swift":[{"children":[{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/merger\/t","title":"T","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/merger\/merge(_:withsubordinate:commonancestor:)","title":"func merge(Self.T, withSubordinate: Self.T, commonAncestor: Self.T) throws -> Self.T","type":"method"}],"path":"\/documentation\/forkedmerge\/merger","title":"Merger","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/arraymerger\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/arraymerger\/merge(_:withsubordinate:commonancestor:)","title":"func merge([Element], withSubordinate: [Element], commonAncestor: [Element]) throws -> [Element]","type":"method"}],"path":"\/documentation\/forkedmerge\/arraymerger","title":"ArrayMerger","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/arrayofidentifiablemerger\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/arrayofidentifiablemerger\/merge(_:withsubordinate:commonancestor:)-1pmm2","title":"func merge([Element], withSubordinate: [Element], commonAncestor: [Element]) throws -> [Element]","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/arrayofidentifiablemerger\/merge(_:withsubordinate:commonancestor:)-98zh8","title":"func merge([Element], withSubordinate: [Element], commonAncestor: [Element]) throws -> [Element]","type":"method"}],"path":"\/documentation\/forkedmerge\/arrayofidentifiablemerger\/merger-implementations","title":"Merger Implementations","type":"symbol"}],"path":"\/documentation\/forkedmerge\/arrayofidentifiablemerger","title":"ArrayOfIdentifiableMerger","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/dictionarymerger\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/dictionarymerger\/merge(_:withsubordinate:commonancestor:)-5llcd","title":"func merge(Dictionary<Key, Value>, withSubordinate: Dictionary<Key, Value>, commonAncestor: Dictionary<Key, Value>) throws -> Dictionary<Key, Value>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/dictionarymerger\/merge(_:withsubordinate:commonancestor:)-7u4jn","title":"func merge(Dictionary<Key, Value>, withSubordinate: Dictionary<Key, Value>, commonAncestor: Dictionary<Key, Value>) throws -> Dictionary<Key, Value>","type":"method"}],"path":"\/documentation\/forkedmerge\/dictionarymerger\/merger-implementations","title":"Merger Implementations","type":"symbol"}],"path":"\/documentation\/forkedmerge\/dictionarymerger","title":"DictionaryMerger","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/init()","title":"init()","type":"init"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/init(_:)","title":"init([Element])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/count","title":"var count: UInt64","type":"property"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/values","title":"var values: Array<Element>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/append(_:)","title":"func append(Element)","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/entriesuniquelyidentified()","title":"func entriesUniquelyIdentified() -> MergeableArray<Element>","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/insert(_:at:)","title":"func insert(Element, at: Int)","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/merged(withsubordinate:commonancestor:)-4xgxi","title":"func merged(withSubordinate: MergeableArray<Element>, commonAncestor: MergeableArray<Element>) throws -> MergeableArray<Element>","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/merged(withsubordinate:commonancestor:)-8913f","title":"func merged(withSubordinate: MergeableArray<Element>, commonAncestor: MergeableArray<Element>) throws -> MergeableArray<Element>","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/remove(at:)","title":"func remove(at: Int) -> Element","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/last","title":"var last: Self.Element?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/difference(from:)","title":"func difference<C>(from: C) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/difference(from:by:)","title":"func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/firstrange(of:)-6sfhc","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/formindex(before:)","title":"func formIndex(before: inout Self.Index)","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/joined(separator:)-75cc1","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/last(where:)","title":"func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/lastindex(of:)","title":"func lastIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/lastindex(where:)","title":"func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/reversed()","title":"func reversed() -> ReversedCollection<Self>","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"}],"path":"\/documentation\/forkedmerge\/mergeablearray\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/endindex","title":"var endIndex: Int","type":"property"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/startindex","title":"var startIndex: Int","type":"property"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/firstindex(of:)","title":"func firstIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/firstrange(of:)-8xuqu","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/formindex(after:)","title":"func formIndex(after: inout Self.Index)","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/index(after:)","title":"func index(after: Int) -> Int","type":"method"},{"deprecated":true,"path":"\/documentation\/forkedmerge\/mergeablearray\/index(of:)","title":"func index(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/indices(of:)","title":"func indices(of: Self.Element) -> RangeSet<Self.Index>","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/indices(where:)","title":"func indices(where: (Self.Element) throws -> Bool) rethrows -> RangeSet<Self.Index>","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/makeiterator()","title":"func makeIterator() -> IndexingIterator<Self>","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/map(_:)-4ccaf","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/ranges(of:)","title":"func ranges<C>(of: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/removingsubranges(_:)","title":"func removingSubranges(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/trimmingprefix(_:)","title":"func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/subscript(_:)","title":"subscript(Int) -> Element","type":"subscript"}],"path":"\/documentation\/forkedmerge\/mergeablearray\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/init(from:)","title":"init(from: any Decoder) throws","type":"init"}],"path":"\/documentation\/forkedmerge\/mergeablearray\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/forkedmerge\/mergeablearray\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/init(arrayliteral:)","title":"init(arrayLiteral: Element...)","type":"init"}],"path":"\/documentation\/forkedmerge\/mergeablearray\/expressiblebyarrayliteral-implementations","title":"ExpressibleByArrayLiteral Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/merged(withsubordinate:commonancestor:)-6fkpk","title":"func merged(withSubordinate: MergeableArray<Element>, commonAncestor: MergeableArray<Element>) throws -> MergeableArray<Element>","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/salvaging(from:)","title":"func salvaging(from: Self) throws -> Self","type":"method"}],"path":"\/documentation\/forkedmerge\/mergeablearray\/mergeable-implementations","title":"Mergeable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"}],"path":"\/documentation\/forkedmerge\/mergeablearray\/randomaccesscollection-implementations","title":"RandomAccessCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/flatmap(_:)-6q035","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"deprecated":true,"path":"\/documentation\/forkedmerge\/mergeablearray\/flatmap(_:)-7nexl","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/formatted()","title":"func formatted() -> String","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/joined(separator:)-5xpf","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/joined(separator:)-6mvci","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/map(_:)-8i05f","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/sorted(using:)-4ox5r","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/sorted(using:)-745kq","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablearray\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/forkedmerge\/mergeablearray\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/forkedmerge\/mergeablearray","title":"MergeableArray","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/mergeabledictionary\/init()","title":"init()","type":"init"},{"path":"\/documentation\/forkedmerge\/mergeabledictionary\/init(_:)","title":"init(Dictionary<Key, Value>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/mergeabledictionary\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/forkedmerge\/mergeabledictionary\/dictionary","title":"var dictionary: [Key : Value]","type":"property"},{"path":"\/documentation\/forkedmerge\/mergeabledictionary\/keys","title":"var keys: [Key]","type":"property"},{"path":"\/documentation\/forkedmerge\/mergeabledictionary\/values","title":"var values: [Value]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/mergeabledictionary\/merged(withsubordinate:commonancestor:)-7j2cc","title":"func merged(withSubordinate: MergeableDictionary<Key, Value>, commonAncestor: MergeableDictionary<Key, Value>) throws -> MergeableDictionary<Key, Value>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/mergeabledictionary\/subscript(_:)","title":"subscript(Key) -> Value?","type":"subscript"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/mergeabledictionary\/init(from:)","title":"init(from: any Decoder) throws","type":"init"}],"path":"\/documentation\/forkedmerge\/mergeabledictionary\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/mergeabledictionary\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/forkedmerge\/mergeabledictionary\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/mergeabledictionary\/init(dictionaryliteral:)","title":"init(dictionaryLiteral: (Key, Value)...)","type":"init"}],"path":"\/documentation\/forkedmerge\/mergeabledictionary\/expressiblebydictionaryliteral-implementations","title":"ExpressibleByDictionaryLiteral Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/mergeabledictionary\/merged(withsubordinate:commonancestor:)-2fr3y","title":"func merged(withSubordinate: MergeableDictionary<Key, Value>, commonAncestor: MergeableDictionary<Key, Value>) throws -> MergeableDictionary<Key, Value>","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeabledictionary\/salvaging(from:)","title":"func salvaging(from: Self) throws -> Self","type":"method"}],"path":"\/documentation\/forkedmerge\/mergeabledictionary\/mergeable-implementations","title":"Mergeable Implementations","type":"symbol"}],"path":"\/documentation\/forkedmerge\/mergeabledictionary","title":"MergeableDictionary","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/mergeableset\/init()","title":"init()","type":"init"},{"path":"\/documentation\/forkedmerge\/mergeableset\/init(_:)","title":"init(Set<T>)","type":"init"},{"path":"\/documentation\/forkedmerge\/mergeableset\/init(array:)","title":"init(array: [T])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/mergeableset\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/forkedmerge\/mergeableset\/values","title":"var values: Set<T>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/mergeableset\/contains(_:)","title":"func contains(T) -> Bool","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeableset\/insert(_:)","title":"func insert(T) -> Bool","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeableset\/remove(_:)","title":"func remove(T) -> T?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/mergeableset\/init(from:)","title":"init(from: any Decoder) throws","type":"init"}],"path":"\/documentation\/forkedmerge\/mergeableset\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/mergeableset\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/forkedmerge\/mergeableset\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/mergeableset\/init(arrayliteral:)","title":"init(arrayLiteral: T...)","type":"init"}],"path":"\/documentation\/forkedmerge\/mergeableset\/expressiblebyarrayliteral-implementations","title":"ExpressibleByArrayLiteral Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/mergeableset\/merged(withsubordinate:commonancestor:)","title":"func merged(withSubordinate: MergeableSet<T>, commonAncestor: MergeableSet<T>) throws -> MergeableSet<T>","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeableset\/salvaging(from:)","title":"func salvaging(from: Self) throws -> Self","type":"method"}],"path":"\/documentation\/forkedmerge\/mergeableset\/mergeable-implementations","title":"Mergeable Implementations","type":"symbol"}],"path":"\/documentation\/forkedmerge\/mergeableset","title":"MergeableSet","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/mergeablevalue\/init(_:)","title":"init(T)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/mergeablevalue\/value","title":"var value: T","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/mergeablevalue\/init(from:)","title":"init(from: any Decoder) throws","type":"init"}],"path":"\/documentation\/forkedmerge\/mergeablevalue\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/mergeablevalue\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/forkedmerge\/mergeablevalue\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/mergeablevalue\/id","title":"var id: T.ID","type":"property"}],"path":"\/documentation\/forkedmerge\/mergeablevalue\/identifiable-implementations","title":"Identifiable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/mergeablevalue\/merged(withsubordinate:commonancestor:)","title":"func merged(withSubordinate: MergeableValue<T>, commonAncestor: MergeableValue<T>) throws -> MergeableValue<T>","type":"method"},{"path":"\/documentation\/forkedmerge\/mergeablevalue\/salvaging(from:)","title":"func salvaging(from: Self) throws -> Self","type":"method"}],"path":"\/documentation\/forkedmerge\/mergeablevalue\/mergeable-implementations","title":"Mergeable Implementations","type":"symbol"}],"path":"\/documentation\/forkedmerge\/mergeablevalue","title":"MergeableValue","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/setmerger\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/setmerger\/merge(_:withsubordinate:commonancestor:)","title":"func merge(Set<Element>, withSubordinate: Set<Element>, commonAncestor: Set<Element>) throws -> Set<Element>","type":"method"}],"path":"\/documentation\/forkedmerge\/setmerger","title":"SetMerger","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/textmerger\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/textmerger\/merge(_:withsubordinate:commonancestor:)","title":"func merge(String, withSubordinate: String, commonAncestor: String) throws -> String","type":"method"}],"path":"\/documentation\/forkedmerge\/textmerger","title":"TextMerger","type":"struct"},{"title":"Functions","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/merge(merger:dominant:subordinate:commonancestor:)-1b2lu","title":"func merge<Key, Value>(merger: DictionaryMerger<Key, Value>, dominant: Dictionary<Key, Value>, subordinate: Dictionary<Key, Value>, commonAncestor: Dictionary<Key, Value>) throws -> Dictionary<Key, Value>","type":"func"},{"path":"\/documentation\/forkedmerge\/merge(merger:dominant:subordinate:commonancestor:)-4b4sb","title":"func merge<Key, Value>(merger: DictionaryMerger<Key, Value>, dominant: Dictionary<Key, Value>, subordinate: Dictionary<Key, Value>, commonAncestor: Dictionary<Key, Value>) throws -> Dictionary<Key, Value>","type":"func"},{"path":"\/documentation\/forkedmerge\/merge(merger:dominant:subordinate:commonancestor:)-4u2nh","title":"func merge<M>(merger: M, dominant: M.T?, subordinate: M.T?, commonAncestor: M.T?) throws -> M.T?","type":"func"},{"path":"\/documentation\/forkedmerge\/merge(merger:dominant:subordinate:commonancestor:)-6zwxs","title":"func merge<Element>(merger: ArrayOfIdentifiableMerger<Element>, dominant: [Element], subordinate: [Element], commonAncestor: [Element]) throws -> [Element]","type":"func"},{"path":"\/documentation\/forkedmerge\/merge(merger:dominant:subordinate:commonancestor:)-au4q","title":"func merge<M>(merger: M, dominant: M.T, subordinate: M.T, commonAncestor: M.T) throws -> M.T","type":"func"},{"path":"\/documentation\/forkedmerge\/merge(merger:dominant:subordinate:commonancestor:)-hxhk","title":"func merge<Element>(merger: ArrayOfIdentifiableMerger<Element>, dominant: [Element], subordinate: [Element], commonAncestor: [Element]) throws -> [Element]","type":"func"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/propertybacking\/mergeablearray","title":"case mergeableArray","type":"case"},{"path":"\/documentation\/forkedmerge\/propertybacking\/mergeabledictionary","title":"case mergeableDictionary","type":"case"},{"path":"\/documentation\/forkedmerge\/propertybacking\/mergeableset","title":"case mergeableSet","type":"case"},{"path":"\/documentation\/forkedmerge\/propertybacking\/mergeablevalue","title":"case mergeableValue","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/propertybacking\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/propertybacking\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/forkedmerge\/propertybacking\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/propertybacking\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/propertybacking\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/forkedmerge\/propertybacking\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/forkedmerge\/propertybacking","title":"PropertyBacking","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/propertymerge\/arraymerge","title":"case arrayMerge","type":"case"},{"path":"\/documentation\/forkedmerge\/propertymerge\/arrayofidentifiablemerge","title":"case arrayOfIdentifiableMerge","type":"case"},{"path":"\/documentation\/forkedmerge\/propertymerge\/dictionarymerge","title":"case dictionaryMerge","type":"case"},{"path":"\/documentation\/forkedmerge\/propertymerge\/mergeableprotocol","title":"case mergeableProtocol","type":"case"},{"path":"\/documentation\/forkedmerge\/propertymerge\/setmerge","title":"case setMerge","type":"case"},{"path":"\/documentation\/forkedmerge\/propertymerge\/textmerge","title":"case textMerge","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/propertymerge\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/propertymerge\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/forkedmerge\/propertymerge\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/propertymerge\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/forkedmerge\/propertymerge\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/forkedmerge\/propertymerge\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/forkedmerge\/propertymerge","title":"PropertyMerge","type":"enum"}],"path":"\/documentation\/forkedmerge","title":"ForkedMerge","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":2}}