{"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"topicSections":[{"identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/init()","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/init(_:)"],"anchor":"Initializers","title":"Initializers","generated":true},{"title":"Instance Properties","generated":true,"anchor":"Instance-Properties","identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/count","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/values"]},{"title":"Instance Methods","identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/append(_:)","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/entriesUniquelyIdentified()","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/insert(_:at:)","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/merged(withSubordinate:commonAncestor:)-4xgxi","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/merged(withSubordinate:commonAncestor:)-8913f","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/remove(at:)"],"anchor":"Instance-Methods","generated":true},{"identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/BidirectionalCollection-Implementations","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Collection-Implementations","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Decodable-Implementations","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Equatable-Implementations","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/ExpressibleByArrayLiteral-Implementations","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Mergeable-Implementations","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/RandomAccessCollection-Implementations","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations"],"generated":true,"title":"Default Implementations","anchor":"Default-Implementations"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MergeableArray","kind":"identifier"},{"kind":"text","text":"<"},{"text":"Element","kind":"genericParameter"},{"kind":"text","text":"> "},{"text":"where","kind":"keyword"},{"kind":"text","text":" "},{"text":"Element","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"Equatable","kind":"typeIdentifier","preciseIdentifier":"s:SQ"}]}]}],"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge"]]},"abstract":[{"type":"text","text":"Represents a CRDT for an array of values, such as characters in a string."},{"type":"text","text":" "},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"text":" ","type":"text"},{"type":"text","text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element"},{"text":" ","type":"text"},{"text":"may be present. Think about merging changes to text: If the user types the same word on two","type":"text"},{"type":"text","text":" "},{"text":"devices at the same time, after the merge, you will have the same word twice — the value is","type":"text"},{"text":" ","type":"text"},{"text":"inserted twice, and there is no check that the value already exists in the array.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"text":" ","type":"text"},{"text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,","type":"text"},{"text":" ","type":"text"},{"text":"you should dedupe after every merge.","type":"text"},{"type":"text","text":" "},{"text":"This type represents the array internally as a tree, which generally leads to more intuitive merging","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"text":" ","type":"text"},{"text":"Note that it contains a complete history of changes, including deletions, so it grows over time.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"kind":"symbol","relationshipsSections":[{"identifiers":["doc:\/\/ForkedMerge\/6Forked9MergeableP","doc:\/\/ForkedMerge\/SK","doc:\/\/ForkedMerge\/Sl","doc:\/\/ForkedMerge\/s8CopyableP","doc:\/\/ForkedMerge\/Se","doc:\/\/ForkedMerge\/SE","doc:\/\/ForkedMerge\/SQ","doc:\/\/ForkedMerge\/s25ExpressibleByArrayLiteralP","doc:\/\/ForkedMerge\/SH","doc:\/\/ForkedMerge\/Sk","doc:\/\/ForkedMerge\/ST"],"type":"conformsTo","kind":"relationships","title":"Conforms To"}],"metadata":{"navigatorTitle":[{"kind":"identifier","text":"MergeableArray"}],"externalID":"s:11ForkedMerge14MergeableArrayV","modules":[{"name":"ForkedMerge"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"MergeableArray","kind":"identifier"}],"symbolKind":"struct","roleHeading":"Structure","role":"symbol","title":"MergeableArray"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/mergeablearray"]}],"identifier":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","interfaceLanguage":"swift"},"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/insert(_:at:)":{"kind":"symbol","type":"topic","abstract":[],"title":"insert(_:at:)","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"insert","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"at"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":")"}],"role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/insert(_:at:)","url":"\/documentation\/forkedmerge\/mergeablearray\/insert(_:at:)"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/append(_:)":{"type":"topic","abstract":[],"conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/append(_:)","kind":"symbol","title":"append(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"append","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":")"}],"role":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray\/append(_:)"},"doc://ForkedMerge/Se":{"type":"unresolvable","title":"Swift.Decodable","identifier":"doc:\/\/ForkedMerge\/Se"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/entriesUniquelyIdentified()":{"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"entriesUniquelyIdentified"},{"kind":"text","text":"() -> "},{"text":"MergeableArray","kind":"typeIdentifier","preciseIdentifier":"s:11ForkedMerge14MergeableArrayV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Element"},{"text":">","kind":"text"}],"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Identifiable"},{"type":"text","text":"."}]},"type":"topic","title":"entriesUniquelyIdentified()","url":"\/documentation\/forkedmerge\/mergeablearray\/entriesuniquelyidentified()","abstract":[{"text":"Returns a new array with entries uniquely identified, keeping only the most recently modified instance of each uniquely identified element.","type":"text"},{"text":" ","type":"text"},{"text":"The relative order of the remaining elements is preserved.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/entriesUniquelyIdentified()"},"doc://ForkedMerge/Sk":{"type":"unresolvable","title":"Swift.RandomAccessCollection","identifier":"doc:\/\/ForkedMerge\/Sk"},"doc://ForkedMerge/Sl":{"type":"unresolvable","title":"Swift.Collection","identifier":"doc:\/\/ForkedMerge\/Sl"},"doc://ForkedMerge/documentation/ForkedMerge":{"abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"title":"ForkedMerge","role":"collection","url":"\/documentation\/forkedmerge","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","kind":"symbol","type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/init(_:)":{"url":"\/documentation\/forkedmerge\/mergeablearray\/init(_:)","title":"init(_:)","type":"topic","role":"symbol","kind":"symbol","abstract":[],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/init(_:)","fragments":[{"text":"init","kind":"identifier"},{"text":"([","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":"])","kind":"text"}]},"doc://ForkedMerge/SE":{"type":"unresolvable","title":"Swift.Encodable","identifier":"doc:\/\/ForkedMerge\/SE"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/remove(at:)":{"type":"topic","role":"symbol","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"remove"},{"kind":"text","text":"("},{"kind":"externalParam","text":"at"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Element"}],"title":"remove(at:)","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/remove(at:)","abstract":[],"conformance":{"constraints":[{"code":"Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"url":"\/documentation\/forkedmerge\/mergeablearray\/remove(at:)"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/RandomAccessCollection-Implementations":{"kind":"article","abstract":[],"url":"\/documentation\/forkedmerge\/mergeablearray\/randomaccesscollection-implementations","role":"collectionGroup","title":"RandomAccessCollection Implementations","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/RandomAccessCollection-Implementations","type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Decodable-Implementations":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Decodable-Implementations","type":"topic","abstract":[],"title":"Decodable Implementations","kind":"article","url":"\/documentation\/forkedmerge\/mergeablearray\/decodable-implementations","role":"collectionGroup"},"doc://ForkedMerge/SH":{"type":"unresolvable","title":"Swift.Hashable","identifier":"doc:\/\/ForkedMerge\/SH"},"doc://ForkedMerge/SK":{"type":"unresolvable","title":"Swift.BidirectionalCollection","identifier":"doc:\/\/ForkedMerge\/SK"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Mergeable-Implementations":{"kind":"article","abstract":[],"url":"\/documentation\/forkedmerge\/mergeablearray\/mergeable-implementations","role":"collectionGroup","title":"Mergeable Implementations","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Mergeable-Implementations","type":"topic"},"doc://ForkedMerge/s8CopyableP":{"type":"unresolvable","title":"Swift.Copyable","identifier":"doc:\/\/ForkedMerge\/s8CopyableP"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"navigatorTitle":[{"text":"MergeableArray","kind":"identifier"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Represents a CRDT for an array of values, such as characters in a string."},{"text":" ","type":"text"},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"text":" ","type":"text"},{"text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element","type":"text"},{"type":"text","text":" "},{"text":"may be present. Think about merging changes to text: If the user types the same word on two","type":"text"},{"type":"text","text":" "},{"text":"devices at the same time, after the merge, you will have the same word twice — the value is","type":"text"},{"text":" ","type":"text"},{"text":"inserted twice, and there is no check that the value already exists in the array.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"text":" ","type":"text"},{"text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you should dedupe after every merge."},{"type":"text","text":" "},{"type":"text","text":"This type represents the array internally as a tree, which generally leads to more intuitive merging"},{"type":"text","text":" "},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"text":" ","type":"text"},{"text":"Note that it contains a complete history of changes, including deletions, so it grows over time.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"url":"\/documentation\/forkedmerge\/mergeablearray","title":"MergeableArray","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MergeableArray","kind":"identifier"}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Collection-Implementations":{"kind":"article","abstract":[],"url":"\/documentation\/forkedmerge\/mergeablearray\/collection-implementations","role":"collectionGroup","title":"Collection Implementations","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Collection-Implementations","type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/merged(withSubordinate:commonAncestor:)-8913f":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/merged(withSubordinate:commonAncestor:)-8913f","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Identifiable"},{"type":"text","text":"."}]},"type":"topic","abstract":[{"type":"text","text":"For non-mergeables that are identifiable and equatable. Here we can at least see"},{"type":"text","text":" "},{"text":"which branch has changed, and choose that branch, even if we can’t “fuse” the elements.","type":"text"}],"title":"merged(withSubordinate:commonAncestor:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"merged","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"withSubordinate"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11ForkedMerge14MergeableArrayV","text":"MergeableArray"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Element"},{"text":">, ","kind":"text"},{"text":"commonAncestor","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:11ForkedMerge14MergeableArrayV","text":"MergeableArray","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":">) "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"MergeableArray","preciseIdentifier":"s:11ForkedMerge14MergeableArrayV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Element"},{"text":">","kind":"text"}],"url":"\/documentation\/forkedmerge\/mergeablearray\/merged(withsubordinate:commonancestor:)-8913f","role":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/BidirectionalCollection-Implementations":{"kind":"article","abstract":[],"url":"\/documentation\/forkedmerge\/mergeablearray\/bidirectionalcollection-implementations","role":"collectionGroup","title":"BidirectionalCollection Implementations","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/BidirectionalCollection-Implementations","type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/count":{"title":"count","abstract":[],"url":"\/documentation\/forkedmerge\/mergeablearray\/count","role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/count","kind":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"count"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s6UInt64V","text":"UInt64","kind":"typeIdentifier"}],"type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/ExpressibleByArrayLiteral-Implementations":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/ExpressibleByArrayLiteral-Implementations","type":"topic","abstract":[],"title":"ExpressibleByArrayLiteral Implementations","kind":"article","url":"\/documentation\/forkedmerge\/mergeablearray\/expressiblebyarrayliteral-implementations","role":"collectionGroup"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/init()":{"url":"\/documentation\/forkedmerge\/mergeablearray\/init()","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"()"}],"title":"init()","kind":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/init()","abstract":[],"type":"topic","role":"symbol"},"doc://ForkedMerge/SQ":{"identifier":"doc:\/\/ForkedMerge\/SQ","title":"Swift.Equatable","type":"unresolvable"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Sequence-Implementations":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations","type":"topic","abstract":[],"title":"Sequence Implementations","kind":"article","url":"\/documentation\/forkedmerge\/mergeablearray\/sequence-implementations","role":"collectionGroup"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/values":{"title":"values","abstract":[],"url":"\/documentation\/forkedmerge\/mergeablearray\/values","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"values"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sa","kind":"typeIdentifier","text":"Array"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Element"},{"text":">","kind":"text"}],"type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/values"},"doc://ForkedMerge/ST":{"identifier":"doc:\/\/ForkedMerge\/ST","title":"Swift.Sequence","type":"unresolvable"},"doc://ForkedMerge/s25ExpressibleByArrayLiteralP":{"identifier":"doc:\/\/ForkedMerge\/s25ExpressibleByArrayLiteralP","title":"Swift.ExpressibleByArrayLiteral","type":"unresolvable"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/merged(withSubordinate:commonAncestor:)-4xgxi":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/merged(withSubordinate:commonAncestor:)-4xgxi","type":"topic","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"merged"},{"kind":"text","text":"("},{"kind":"externalParam","text":"withSubordinate"},{"kind":"text","text":": "},{"text":"MergeableArray","preciseIdentifier":"s:11ForkedMerge14MergeableArrayV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":">, "},{"text":"commonAncestor","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"MergeableArray","kind":"typeIdentifier","preciseIdentifier":"s:11ForkedMerge14MergeableArrayV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Element"},{"text":">) ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"MergeableArray","preciseIdentifier":"s:11ForkedMerge14MergeableArrayV"},{"kind":"text","text":"<"},{"text":"Element","kind":"typeIdentifier"},{"text":">","kind":"text"}],"url":"\/documentation\/forkedmerge\/mergeablearray\/merged(withsubordinate:commonancestor:)-4xgxi","title":"merged(withSubordinate:commonAncestor:)","kind":"symbol","abstract":[{"text":"Merge when elements are mergeable and identifiable. More object-like.","type":"text"},{"type":"text","text":" "},{"text":"Will ensure uniqueness of identifiers, and merge together elements with the same identifier.","type":"text"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Mergeable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Identifiable"},{"type":"text","text":"."}]}},"doc://ForkedMerge/6Forked9MergeableP":{"type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/6Forked9MergeableP","title":"Forked.Mergeable"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Equatable-Implementations":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Equatable-Implementations","type":"topic","abstract":[],"title":"Equatable Implementations","kind":"article","url":"\/documentation\/forkedmerge\/mergeablearray\/equatable-implementations","role":"collectionGroup"}}}