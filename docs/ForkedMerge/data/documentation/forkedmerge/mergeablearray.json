{"primaryContentSections":[{"declarations":[{"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MergeableArray"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Element"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"kind":"text","text":" "},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"text":"Equatable","kind":"typeIdentifier","preciseIdentifier":"s:SQ"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"}],"sections":[],"abstract":[{"text":"Represents a CRDT for an array of values, such as characters in a string.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"type":"text","text":" "},{"type":"text","text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element"},{"text":" ","type":"text"},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"type":"text","text":" "},{"type":"text","text":"devices at the same time, after the merge, you will have the same word twice — the value is"},{"text":" ","type":"text"},{"type":"text","text":"inserted twice, and there is no check that the value already exists in the array."},{"type":"text","text":" "},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"text":" ","type":"text"},{"text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you should dedupe after every merge."},{"text":" ","type":"text"},{"text":"This type represents the array internally as a tree, which generally leads to more intuitive merging","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"text":" ","type":"text"},{"type":"text","text":"Note that it contains a complete history of changes, including deletions, so it grows over time."},{"type":"text","text":" "},{"text":"If you need a more compact representation, consider using a merger instead.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge"]]},"kind":"symbol","topicSections":[{"generated":true,"anchor":"Initializers","title":"Initializers","identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/init()","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/init(_:)"]},{"generated":true,"title":"Instance Properties","identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/count","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/values"],"anchor":"Instance-Properties"},{"generated":true,"identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/append(_:)","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/entriesUniquelyIdentified()","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/insert(_:at:)","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/merged(withSubordinate:commonAncestor:)-4xgxi","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/merged(withSubordinate:commonAncestor:)-8913f","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/remove(at:)"],"anchor":"Instance-Methods","title":"Instance Methods"},{"anchor":"Default-Implementations","title":"Default Implementations","identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/BidirectionalCollection-Implementations","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Collection-Implementations","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Decodable-Implementations","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Equatable-Implementations","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/ExpressibleByArrayLiteral-Implementations","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Mergeable-Implementations","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/RandomAccessCollection-Implementations","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations"],"generated":true}],"identifier":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","interfaceLanguage":"swift"},"relationshipsSections":[{"identifiers":["doc:\/\/ForkedMerge\/6Forked9MergeableP","doc:\/\/ForkedMerge\/SK","doc:\/\/ForkedMerge\/Sl","doc:\/\/ForkedMerge\/s8CopyableP","doc:\/\/ForkedMerge\/Se","doc:\/\/ForkedMerge\/SE","doc:\/\/ForkedMerge\/SQ","doc:\/\/ForkedMerge\/s25ExpressibleByArrayLiteralP","doc:\/\/ForkedMerge\/SH","doc:\/\/ForkedMerge\/Sk","doc:\/\/ForkedMerge\/ST"],"kind":"relationships","type":"conformsTo","title":"Conforms To"}],"metadata":{"navigatorTitle":[{"kind":"identifier","text":"MergeableArray"}],"externalID":"s:11ForkedMerge14MergeableArrayV","roleHeading":"Structure","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MergeableArray"}],"title":"MergeableArray","symbolKind":"struct","modules":[{"name":"ForkedMerge"}],"role":"symbol"},"schemaVersion":{"minor":3,"major":0,"patch":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/mergeablearray"]}],"references":{"doc://ForkedMerge/6Forked9MergeableP":{"type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/6Forked9MergeableP","title":"Forked.Mergeable"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/insert(_:at:)":{"kind":"symbol","abstract":[],"title":"insert(_:at:)","role":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray\/insert(_:at:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"insert"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"text":"at","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":")"}],"type":"topic","conformance":{"constraints":[{"code":"Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/insert(_:at:)"},"doc://ForkedMerge/Se":{"type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/Se","title":"Swift.Decodable"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/init(_:)":{"role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"(["},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"])"}],"url":"\/documentation\/forkedmerge\/mergeablearray\/init(_:)","kind":"symbol","type":"topic","title":"init(_:)","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/init(_:)","abstract":[]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Sequence-Implementations":{"kind":"article","type":"topic","url":"\/documentation\/forkedmerge\/mergeablearray\/sequence-implementations","role":"collectionGroup","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations","abstract":[],"title":"Sequence Implementations"},"doc://ForkedMerge/s25ExpressibleByArrayLiteralP":{"type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/s25ExpressibleByArrayLiteralP","title":"Swift.ExpressibleByArrayLiteral"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/init()":{"role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"()"}],"url":"\/documentation\/forkedmerge\/mergeablearray\/init()","kind":"symbol","title":"init()","type":"topic","abstract":[],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/init()"},"doc://ForkedMerge/Sl":{"type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/Sl","title":"Swift.Collection"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Collection-Implementations":{"role":"collectionGroup","url":"\/documentation\/forkedmerge\/mergeablearray\/collection-implementations","abstract":[],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Collection-Implementations","title":"Collection Implementations","type":"topic","kind":"article"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/ExpressibleByArrayLiteral-Implementations":{"kind":"article","type":"topic","url":"\/documentation\/forkedmerge\/mergeablearray\/expressiblebyarrayliteral-implementations","role":"collectionGroup","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/ExpressibleByArrayLiteral-Implementations","abstract":[],"title":"ExpressibleByArrayLiteral Implementations"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/append(_:)":{"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"append"},{"text":"(","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":")"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}]},"role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/append(_:)","url":"\/documentation\/forkedmerge\/mergeablearray\/append(_:)","title":"append(_:)","abstract":[],"type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Mergeable-Implementations":{"role":"collectionGroup","url":"\/documentation\/forkedmerge\/mergeablearray\/mergeable-implementations","abstract":[],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Mergeable-Implementations","title":"Mergeable Implementations","type":"topic","kind":"article"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"kind":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray","role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"MergeableArray","kind":"identifier"}],"navigatorTitle":[{"text":"MergeableArray","kind":"identifier"}],"abstract":[{"type":"text","text":"Represents a CRDT for an array of values, such as characters in a string."},{"type":"text","text":" "},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"type":"text","text":" "},{"type":"text","text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element"},{"text":" ","type":"text"},{"text":"may be present. Think about merging changes to text: If the user types the same word on two","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"devices at the same time, after the merge, you will have the same word twice — the value is"},{"text":" ","type":"text"},{"type":"text","text":"inserted twice, and there is no check that the value already exists in the array."},{"type":"text","text":" "},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"text":" ","type":"text"},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"type":"text","text":" "},{"text":"you should dedupe after every merge.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This type represents the array internally as a tree, which generally leads to more intuitive merging"},{"text":" ","type":"text"},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"type":"text","text":" "},{"text":"Note that it contains a complete history of changes, including deletions, so it grows over time.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"title":"MergeableArray","type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Decodable-Implementations":{"kind":"article","type":"topic","url":"\/documentation\/forkedmerge\/mergeablearray\/decodable-implementations","role":"collectionGroup","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Decodable-Implementations","abstract":[],"title":"Decodable Implementations"},"doc://ForkedMerge/s8CopyableP":{"type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/s8CopyableP","title":"Swift.Copyable"},"doc://ForkedMerge/SE":{"type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/SE","title":"Swift.Encodable"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/values":{"abstract":[],"role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/values","title":"values","kind":"symbol","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"values"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sa","kind":"typeIdentifier","text":"Array"},{"text":"<","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":">","kind":"text"}],"type":"topic","url":"\/documentation\/forkedmerge\/mergeablearray\/values"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/count":{"url":"\/documentation\/forkedmerge\/mergeablearray\/count","kind":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/count","type":"topic","abstract":[],"title":"count","role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"count","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s6UInt64V","text":"UInt64"}]},"doc://ForkedMerge/SH":{"type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/SH","title":"Swift.Hashable"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/merged(withSubordinate:commonAncestor:)-4xgxi":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/merged(withSubordinate:commonAncestor:)-4xgxi","kind":"symbol","abstract":[{"text":"Merge when elements are mergeable and identifiable. More object-like.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Will ensure uniqueness of identifiers, and merge together elements with the same identifier."}],"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"merged"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"withSubordinate"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"MergeableArray","preciseIdentifier":"s:11ForkedMerge14MergeableArrayV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Element"},{"text":">, ","kind":"text"},{"text":"commonAncestor","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:11ForkedMerge14MergeableArrayV","text":"MergeableArray"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">) "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:11ForkedMerge14MergeableArrayV","text":"MergeableArray","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":">"}],"url":"\/documentation\/forkedmerge\/mergeablearray\/merged(withsubordinate:commonancestor:)-4xgxi","type":"topic","title":"merged(withSubordinate:commonAncestor:)","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Mergeable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Identifiable"},{"type":"text","text":"."}]}},"doc://ForkedMerge/Sk":{"type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/Sk","title":"Swift.RandomAccessCollection"},"doc://ForkedMerge/SK":{"type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/SK","title":"Swift.BidirectionalCollection"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/BidirectionalCollection-Implementations":{"kind":"article","type":"topic","url":"\/documentation\/forkedmerge\/mergeablearray\/bidirectionalcollection-implementations","role":"collectionGroup","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/BidirectionalCollection-Implementations","abstract":[],"title":"BidirectionalCollection Implementations"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/remove(at:)":{"url":"\/documentation\/forkedmerge\/mergeablearray\/remove(at:)","role":"symbol","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"remove"},{"text":"(","kind":"text"},{"text":"at","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Element"}],"title":"remove(at:)","type":"topic","abstract":[],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/remove(at:)","conformance":{"constraints":[{"code":"Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]}},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/RandomAccessCollection-Implementations":{"role":"collectionGroup","url":"\/documentation\/forkedmerge\/mergeablearray\/randomaccesscollection-implementations","abstract":[],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/RandomAccessCollection-Implementations","title":"RandomAccessCollection Implementations","type":"topic","kind":"article"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/entriesUniquelyIdentified()":{"url":"\/documentation\/forkedmerge\/mergeablearray\/entriesuniquelyidentified()","title":"entriesUniquelyIdentified()","kind":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/entriesUniquelyIdentified()","role":"symbol","conformance":{"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Identifiable"},{"text":".","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"entriesUniquelyIdentified","kind":"identifier"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"MergeableArray","preciseIdentifier":"s:11ForkedMerge14MergeableArrayV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"type":"topic","abstract":[{"type":"text","text":"Returns a new array with entries uniquely identified, keeping only the most recently modified instance of each uniquely identified element."},{"type":"text","text":" "},{"type":"text","text":"The relative order of the remaining elements is preserved."}]},"doc://ForkedMerge/documentation/ForkedMerge":{"abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"type":"topic","kind":"symbol","title":"ForkedMerge","role":"collection","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","url":"\/documentation\/forkedmerge"},"doc://ForkedMerge/SQ":{"type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/SQ","title":"Swift.Equatable"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/merged(withSubordinate:commonAncestor:)-8913f":{"role":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray\/merged(withsubordinate:commonancestor:)-8913f","kind":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/merged(withSubordinate:commonAncestor:)-8913f","title":"merged(withSubordinate:commonAncestor:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"merged","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"withSubordinate"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:11ForkedMerge14MergeableArrayV","text":"MergeableArray"},{"text":"<","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"commonAncestor","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11ForkedMerge14MergeableArrayV","text":"MergeableArray"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">) "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"MergeableArray","preciseIdentifier":"s:11ForkedMerge14MergeableArrayV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Element"},{"text":">","kind":"text"}],"abstract":[{"type":"text","text":"For non-mergeables that are identifiable and equatable. Here we can at least see"},{"type":"text","text":" "},{"text":"which branch has changed, and choose that branch, even if we can’t “fuse” the elements.","type":"text"}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"code":"Equatable","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Identifiable","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]}},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Equatable-Implementations":{"role":"collectionGroup","url":"\/documentation\/forkedmerge\/mergeablearray\/equatable-implementations","abstract":[],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Equatable-Implementations","title":"Equatable Implementations","type":"topic","kind":"article"},"doc://ForkedMerge/ST":{"type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/ST","title":"Swift.Sequence"}}}