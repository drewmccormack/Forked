{"relationshipsSections":[{"type":"conformsTo","kind":"relationships","title":"Conforms To","identifiers":["doc:\/\/ForkedMerge\/SQ","doc:\/\/ForkedMerge\/SH","doc:\/\/ForkedMerge\/SY"]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"PropertyMerge","kind":"identifier"}],"platforms":["macOS"]}],"kind":"declarations"}],"abstract":[{"text":"The algorithm used to merge changes to a property.","type":"text"},{"text":" ","type":"text"},{"text":"Some properties know how to merge themselves; they conform to ","type":"text"},{"code":"Mergeable","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"Other types have no intrinsic merge, but can be merged by a ","type":"text"},{"type":"codeVoice","code":"Merger"},{"type":"text","text":"."}],"topicSections":[{"identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/arrayMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/arrayOfIdentifiableMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/dictionaryMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/mergeableProtocol","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/setMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/textMerge"],"generated":true,"title":"Enumeration Cases","anchor":"Enumeration-Cases"},{"generated":true,"title":"Initializers","identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/init(rawValue:)"],"anchor":"Initializers"},{"title":"Default Implementations","generated":true,"identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/Equatable-Implementations","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/RawRepresentable-Implementations"],"anchor":"Default-Implementations"}],"sections":[],"metadata":{"symbolKind":"enum","role":"symbol","navigatorTitle":[{"text":"PropertyMerge","kind":"identifier"}],"roleHeading":"Enumeration","modules":[{"name":"ForkedMerge"}],"title":"PropertyMerge","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"PropertyMerge"}],"externalID":"s:11ForkedMerge08PropertyB0O"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/propertymerge"]}],"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge"},"kind":"symbol","references":{"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/init(rawValue:)":{"role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/init(rawValue:)","url":"\/documentation\/forkedmerge\/propertymerge\/init(rawvalue:)","abstract":[],"kind":"symbol","type":"topic","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"?("},{"text":"rawValue","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":")","kind":"text"}],"title":"init(rawValue:)"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/Equatable-Implementations":{"type":"topic","abstract":[],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/Equatable-Implementations","kind":"article","title":"Equatable Implementations","role":"collectionGroup","url":"\/documentation\/forkedmerge\/propertymerge\/equatable-implementations"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge":{"url":"\/documentation\/forkedmerge\/propertymerge","kind":"symbol","abstract":[{"text":"The algorithm used to merge changes to a property.","type":"text"},{"text":" ","type":"text"},{"text":"Some properties know how to merge themselves; they conform to ","type":"text"},{"type":"codeVoice","code":"Mergeable"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Other types have no intrinsic merge, but can be merged by a "},{"type":"codeVoice","code":"Merger"},{"text":".","type":"text"}],"title":"PropertyMerge","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"PropertyMerge"}],"type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge","navigatorTitle":[{"kind":"identifier","text":"PropertyMerge"}],"role":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/textMerge":{"role":"symbol","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"textMerge"}],"abstract":[{"text":"Applies the ","type":"text"},{"type":"codeVoice","code":"array"},{"text":" merge algorithm to the characters in a string.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This is suitable for any type of shared text, which may"},{"type":"text","text":" "},{"text":"have conflicting edits, like a collaborative editor.","type":"text"},{"text":" ","type":"text"},{"text":"The variable must be a ","type":"text"},{"code":"String","type":"codeVoice"},{"text":".","type":"text"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/textMerge","type":"topic","kind":"symbol","url":"\/documentation\/forkedmerge\/propertymerge\/textmerge","title":"PropertyMerge.textMerge"},"doc://ForkedMerge/SH":{"type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/SH","title":"Swift.Hashable"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/dictionaryMerge":{"type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/dictionaryMerge","url":"\/documentation\/forkedmerge\/propertymerge\/dictionarymerge","title":"PropertyMerge.dictionaryMerge","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"case"},{"text":" ","kind":"text"},{"kind":"identifier","text":"dictionaryMerge"}],"abstract":[{"type":"text","text":"Merges dictionaries. When there is a conflict, it will merge using"},{"text":" ","type":"text"},{"type":"text","text":"a MergeableDictionary for each dictionary. If the value type is"},{"text":" ","type":"text"},{"code":"Mergeable","type":"codeVoice"},{"type":"text","text":", the dictionary will be merged recursing into the values."}]},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/arrayOfIdentifiableMerge":{"fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"arrayOfIdentifiableMerge"}],"title":"PropertyMerge.arrayOfIdentifiableMerge","type":"topic","role":"symbol","url":"\/documentation\/forkedmerge\/propertymerge\/arrayofidentifiablemerge","kind":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/arrayOfIdentifiableMerge","abstract":[{"type":"text","text":"Will merge as an array of values. Elements must be Equatable and"},{"type":"text","text":" "},{"type":"text","text":"Identifiable. It will ensure that there are no duplicated identifiers following"},{"text":" ","type":"text"},{"type":"text","text":"a merge. When there is a conflict, it will"},{"text":" ","type":"text"},{"text":"determine the changes made to each version, and merge with an","type":"text"},{"type":"text","text":" "},{"type":"text","text":"algorithm that keeps related changes together (eg editing a word)."},{"text":" ","type":"text"},{"text":"Guarantees uniqueness of identifiers after merge, but does not","type":"text"},{"type":"text","text":" "},{"type":"text","text":"enforce uniqueness of identifiers through updates made directly to the"},{"text":" ","type":"text"},{"type":"text","text":"property."}]},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/setMerge":{"url":"\/documentation\/forkedmerge\/propertymerge\/setmerge","type":"topic","abstract":[{"type":"text","text":"Will merge sets of values. When there is a conflict, it will handle"},{"type":"text","text":" "},{"text":"it using a MergeableSet for each set of changes.","type":"text"}],"role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/setMerge","kind":"symbol","title":"PropertyMerge.setMerge","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"setMerge","kind":"identifier"}]},"doc://ForkedMerge/SQ":{"type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/SQ","title":"Swift.Equatable"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/arrayMerge":{"type":"topic","url":"\/documentation\/forkedmerge\/propertymerge\/arraymerge","role":"symbol","title":"PropertyMerge.arrayMerge","fragments":[{"text":"case","kind":"keyword"},{"kind":"text","text":" "},{"text":"arrayMerge","kind":"identifier"}],"abstract":[{"type":"text","text":"Will merge as an array of values. Elements must be Equatable."},{"type":"text","text":" "},{"type":"text","text":"When there is a conflict, it will"},{"text":" ","type":"text"},{"text":"determine the changes made to each version, and merge with an","type":"text"},{"text":" ","type":"text"},{"text":"algorithm that keeps related changes together (eg editing a word).","type":"text"},{"text":" ","type":"text"},{"text":"Does not guarantee uniqueness of elements after merge:","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"there can be duplicates created, so it is more suitable to value types"},{"text":" ","type":"text"},{"type":"text","text":"like characters in a string. than it is to identifiable types."}],"kind":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/arrayMerge"},"doc://ForkedMerge/documentation/ForkedMerge":{"abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"title":"ForkedMerge","role":"collection","url":"\/documentation\/forkedmerge","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","kind":"symbol","type":"topic"},"doc://ForkedMerge/SY":{"type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/SY","title":"Swift.RawRepresentable"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/RawRepresentable-Implementations":{"type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/RawRepresentable-Implementations","url":"\/documentation\/forkedmerge\/propertymerge\/rawrepresentable-implementations","title":"RawRepresentable Implementations","role":"collectionGroup","kind":"article","abstract":[]},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/mergeableProtocol":{"role":"symbol","fragments":[{"text":"case","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"mergeableProtocol"}],"title":"PropertyMerge.mergeableProtocol","url":"\/documentation\/forkedmerge\/propertymerge\/mergeableprotocol","abstract":[{"text":"The property must be a ","type":"text"},{"code":"Mergeable","type":"codeVoice"},{"type":"text","text":" type, and will be merged accordingly"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"code":"Mergeable","type":"codeVoice"},{"text":" protocol.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This is the default algorithm if "},{"type":"codeVoice","code":"@Merged"},{"type":"text","text":" has been applied with no"},{"type":"text","text":" "},{"text":"algorithm stated.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/mergeableProtocol","type":"topic"}}}