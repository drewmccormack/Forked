{"abstract":[{"text":"Returns an index that is the specified distance from the given index,","type":"text"},{"type":"text","text":" "},{"text":"unless that distance is beyond a given limiting index.","type":"text"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"index","kind":"identifier"},{"kind":"text","text":"("},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"i","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"preciseIdentifier":"s:Sl5IndexQa","text":"Index","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"offsetBy","kind":"externalParam"},{"kind":"text","text":" "},{"text":"distance","kind":"internalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":", "},{"text":"limitedBy","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"limit"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Index","kind":"typeIdentifier","preciseIdentifier":"s:Sl5IndexQa"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"preciseIdentifier":"s:Sl5IndexQa","kind":"typeIdentifier","text":"Index"},{"text":"?","kind":"text"}]}]},{"parameters":[{"name":"i","content":[{"type":"paragraph","inlineContent":[{"text":"A valid index of the array.","type":"text"}]}]},{"name":"distance","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The distance to offset "},{"code":"i","type":"codeVoice"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"A valid index of the collection to use as a limit. If"},{"text":" ","type":"text"},{"type":"codeVoice","code":"distance > 0"},{"text":", ","type":"text"},{"type":"codeVoice","code":"limit"},{"type":"text","text":" should be greater than "},{"code":"i","type":"codeVoice"},{"type":"text","text":" to have any"},{"text":" ","type":"text"},{"type":"text","text":"effect. Likewise, if "},{"type":"codeVoice","code":"distance < 0"},{"type":"text","text":", "},{"type":"codeVoice","code":"limit"},{"type":"text","text":" should be less than "},{"type":"codeVoice","code":"i"},{"text":" ","type":"text"},{"text":"to have any effect.","type":"text"}],"type":"paragraph"}],"name":"limit"}],"kind":"parameters"},{"kind":"content","content":[{"level":2,"text":"Return Value","anchor":"return-value","type":"heading"},{"inlineContent":[{"text":"An index offset by ","type":"text"},{"type":"codeVoice","code":"distance"},{"text":" from the index ","type":"text"},{"code":"i","type":"codeVoice"},{"text":", unless that","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"index would be beyond "},{"type":"codeVoice","code":"limit"},{"type":"text","text":" in the direction of movement. In that"},{"type":"text","text":" "},{"type":"text","text":"case, the method returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"level":2,"text":"Discussion","type":"heading","anchor":"discussion"},{"inlineContent":[{"text":"The following example obtains an index advanced four positions from an","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"array’s starting index and then prints the element at that position. The"},{"text":" ","type":"text"},{"type":"text","text":"operation doesn’t require going beyond the limiting "},{"code":"numbers.endIndex","type":"codeVoice"},{"type":"text","text":" "},{"text":"value, so it succeeds.","type":"text"}],"type":"paragraph"},{"code":["let numbers = [10, 20, 30, 40, 50]","let i = numbers.index(numbers.startIndex, offsetBy: 4)","print(numbers[i])","\/\/ Prints \"50\""],"type":"codeListing","syntax":null},{"type":"paragraph","inlineContent":[{"text":"The next example attempts to retrieve an index ten positions from","type":"text"},{"type":"text","text":" "},{"code":"numbers.startIndex","type":"codeVoice"},{"type":"text","text":", but fails, because that distance is beyond the"},{"text":" ","type":"text"},{"text":"index passed as ","type":"text"},{"type":"codeVoice","code":"limit"},{"text":".","type":"text"}]},{"syntax":null,"code":["let j = numbers.index(numbers.startIndex,","                      offsetBy: 10,","                      limitedBy: numbers.endIndex)","print(j)","\/\/ Prints \"nil\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The value passed as "},{"type":"codeVoice","code":"distance"},{"type":"text","text":" must not offset "},{"code":"i","type":"codeVoice"},{"type":"text","text":" beyond the bounds of"},{"text":" ","type":"text"},{"text":"the collection, unless the index passed as ","type":"text"},{"type":"codeVoice","code":"limit"},{"type":"text","text":" prevents offsetting"},{"type":"text","text":" "},{"type":"text","text":"beyond those bounds."}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"O(1)","type":"text"}]}],"name":"Complexity","type":"aside","style":"note"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/mergeablearray\/index(_:offsetby:limitedby:)"]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/index(_:offsetBy:limitedBy:)"},"sections":[],"kind":"symbol","metadata":{"roleHeading":"Instance Method","externalID":"s:SksE5index_8offsetBy07limitedC05IndexQzSgAE_SiAEtF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","title":"index(_:offsetBy:limitedBy:)","extendedModule":"Swift","symbolKind":"method","role":"symbol","modules":[{"relatedModules":["Swift"],"name":"ForkedMerge"}],"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"index","kind":"identifier"},{"kind":"text","text":"("},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:Sl5IndexQa","text":"Index","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"offsetBy","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"limitedBy"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:Sl5IndexQa","text":"Index"},{"kind":"text","text":") -> "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:Sl5IndexQa","text":"Index","kind":"typeIdentifier"},{"kind":"text","text":"?"}]},"references":{"doc://ForkedMerge/documentation/ForkedMerge":{"abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"title":"ForkedMerge","role":"collection","url":"\/documentation\/forkedmerge","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","kind":"symbol","type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/index(_:offsetBy:limitedBy:)":{"abstract":[{"text":"Returns an index that is the specified distance from the given index,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"unless that distance is beyond a given limiting index."}],"title":"index(_:offsetBy:limitedBy:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"index","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"Index","kind":"typeIdentifier","preciseIdentifier":"s:Sl5IndexQa"},{"kind":"text","text":", "},{"text":"offsetBy","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"limitedBy"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sl5IndexQa","text":"Index"},{"kind":"text","text":") -> "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:Sl5IndexQa","text":"Index","kind":"typeIdentifier"},{"kind":"text","text":"?"}],"url":"\/documentation\/forkedmerge\/mergeablearray\/index(_:offsetby:limitedby:)","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/index(_:offsetBy:limitedBy:)","type":"topic","kind":"symbol","role":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"navigatorTitle":[{"text":"MergeableArray","kind":"identifier"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Represents a CRDT for an array of values, such as characters in a string."},{"text":" ","type":"text"},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"text":" ","type":"text"},{"text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element","type":"text"},{"type":"text","text":" "},{"text":"may be present. Think about merging changes to text: If the user types the same word on two","type":"text"},{"type":"text","text":" "},{"text":"devices at the same time, after the merge, you will have the same word twice — the value is","type":"text"},{"text":" ","type":"text"},{"text":"inserted twice, and there is no check that the value already exists in the array.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"text":" ","type":"text"},{"text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you should dedupe after every merge."},{"type":"text","text":" "},{"type":"text","text":"This type represents the array internally as a tree, which generally leads to more intuitive merging"},{"type":"text","text":" "},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"text":" ","type":"text"},{"text":"Note that it contains a complete history of changes, including deletions, so it grows over time.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"url":"\/documentation\/forkedmerge\/mergeablearray","title":"MergeableArray","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MergeableArray","kind":"identifier"}]}}}