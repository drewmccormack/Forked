{"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/mergeablearray\/split(separator:maxsplits:omittingemptysubsequences:)"]}],"abstract":[{"type":"text","text":"Returns the longest possible subsequences of the collection, in order,"},{"text":" ","type":"text"},{"text":"around elements equal to the given element.","type":"text"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/split(separator:maxSplits:omittingEmptySubsequences:)"},"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Collection-Implementations"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"split","kind":"identifier"},{"text":"(","kind":"text"},{"text":"separator","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"kind":"text","text":", "},{"kind":"externalParam","text":"maxSplits"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"kind":"text","text":" = Int.max, "},{"text":"omittingEmptySubsequences","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"kind":"text","text":" = true) -> ["},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"SubSequence","kind":"typeIdentifier","preciseIdentifier":"s:Sl11SubSequenceQa"},{"kind":"text","text":"]"}],"platforms":["macOS"]}]},{"kind":"parameters","parameters":[{"name":"separator","content":[{"type":"paragraph","inlineContent":[{"text":"The element that should be split upon.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The maximum number of times to split the collection, or","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"one less than the number of subsequences to return. If"},{"text":" ","type":"text"},{"type":"codeVoice","code":"maxSplits + 1"},{"type":"text","text":" subsequences are returned, the last one is a suffix"},{"text":" ","type":"text"},{"type":"text","text":"of the original collection containing the remaining elements."},{"text":" ","type":"text"},{"code":"maxSplits","type":"codeVoice"},{"type":"text","text":" must be greater than or equal to zero. The default value"},{"type":"text","text":" "},{"type":"text","text":"is "},{"type":"codeVoice","code":"Int.max"},{"text":".","type":"text"}]}],"name":"maxSplits"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If "},{"code":"false","type":"codeVoice"},{"type":"text","text":", an empty subsequence is"},{"type":"text","text":" "},{"text":"returned in the result for each consecutive pair of ","type":"text"},{"code":"separator","type":"codeVoice"},{"type":"text","text":" "},{"text":"elements in the collection and for each instance of ","type":"text"},{"type":"codeVoice","code":"separator"},{"type":"text","text":" at"},{"text":" ","type":"text"},{"text":"the start or end of the collection. If ","type":"text"},{"code":"true","type":"codeVoice"},{"type":"text","text":", only nonempty"},{"type":"text","text":" "},{"type":"text","text":"subsequences are returned. The default value is "},{"type":"codeVoice","code":"true"},{"text":".","type":"text"}]}],"name":"omittingEmptySubsequences"}]},{"content":[{"level":2,"type":"heading","text":"Return Value","anchor":"return-value"},{"inlineContent":[{"type":"text","text":"An array of subsequences, split from this collection’s"},{"type":"text","text":" "},{"type":"text","text":"elements."}],"type":"paragraph"}],"kind":"content"},{"kind":"content","content":[{"type":"heading","text":"Discussion","level":2,"anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The resulting array consists of at most "},{"code":"maxSplits + 1","type":"codeVoice"},{"type":"text","text":" subsequences."},{"type":"text","text":" "},{"type":"text","text":"Elements that are used to split the collection are not returned as part"},{"type":"text","text":" "},{"type":"text","text":"of any subsequence."}]},{"inlineContent":[{"type":"text","text":"The following examples show the effects of the "},{"code":"maxSplits","type":"codeVoice"},{"text":" and","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"omittingEmptySubsequences"},{"type":"text","text":" parameters when splitting a string at each"},{"type":"text","text":" "},{"type":"text","text":"space character (” “). The first use of "},{"code":"split","type":"codeVoice"},{"type":"text","text":" returns each word that"},{"type":"text","text":" "},{"type":"text","text":"was originally separated by one or more spaces."}],"type":"paragraph"},{"code":["let line = \"BLANCHE:   I don't want realism. I want magic!\"","print(line.split(separator: \" \"))","\/\/ Prints \"[\"BLANCHE:\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\""],"type":"codeListing","syntax":null},{"inlineContent":[{"text":"The second example passes ","type":"text"},{"type":"codeVoice","code":"1"},{"type":"text","text":" for the "},{"type":"codeVoice","code":"maxSplits"},{"type":"text","text":" parameter, so the"},{"type":"text","text":" "},{"type":"text","text":"original string is split just once, into two new strings."}],"type":"paragraph"},{"code":["print(line.split(separator: \" \", maxSplits: 1))","\/\/ Prints \"[\"BLANCHE:\", \"  I don\\'t want realism. I want magic!\"]\""],"syntax":null,"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The final example passes ","type":"text"},{"type":"codeVoice","code":"false"},{"text":" for the ","type":"text"},{"type":"codeVoice","code":"omittingEmptySubsequences"},{"type":"text","text":" "},{"type":"text","text":"parameter, so the returned array contains empty strings where spaces"},{"text":" ","type":"text"},{"type":"text","text":"were repeated."}]},{"code":["print(line.split(separator: \" \", omittingEmptySubsequences: false))","\/\/ Prints \"[\"BLANCHE:\", \"\", \"\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\""],"type":"codeListing","syntax":null},{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"O("},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"type":"text","text":"), where "},{"inlineContent":[{"text":"n","type":"text"}],"type":"emphasis"},{"type":"text","text":" is the length of the collection."}]}],"name":"Complexity"}]}],"metadata":{"extendedModule":"Swift","title":"split(separator:maxSplits:omittingEmptySubsequences:)","symbolKind":"method","roleHeading":"Instance Method","role":"symbol","modules":[{"name":"ForkedMerge","relatedModules":["Swift"]}],"externalID":"s:SlsSQ7ElementRpzrlE5split9separator9maxSplits25omittingEmptySubsequencesSay11SubSequenceQzGAB_SiSbtF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","conformance":{"constraints":[{"code":"Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"split"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"separator"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:ST7ElementQa"},{"text":", ","kind":"text"},{"text":"maxSplits","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"omittingEmptySubsequences"},{"kind":"text","text":": "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"kind":"text","text":") -> ["},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"SubSequence","kind":"typeIdentifier","preciseIdentifier":"s:Sl11SubSequenceQa"},{"text":"]","kind":"text"}]},"sections":[],"schemaVersion":{"major":0,"patch":0,"minor":3},"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"kind":"symbol","role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","navigatorTitle":[{"text":"MergeableArray","kind":"identifier"}],"title":"MergeableArray","abstract":[{"type":"text","text":"Represents a CRDT for an array of values, such as characters in a string."},{"type":"text","text":" "},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"text":" ","type":"text"},{"type":"text","text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element"},{"type":"text","text":" "},{"text":"may be present. Think about merging changes to text: If the user types the same word on two","type":"text"},{"type":"text","text":" "},{"type":"text","text":"devices at the same time, after the merge, you will have the same word twice — the value is"},{"type":"text","text":" "},{"type":"text","text":"inserted twice, and there is no check that the value already exists in the array."},{"type":"text","text":" "},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"type":"text","text":" "},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"type":"text","text":" "},{"text":"you should dedupe after every merge.","type":"text"},{"type":"text","text":" "},{"text":"This type represents the array internally as a tree, which generally leads to more intuitive merging","type":"text"},{"text":" ","type":"text"},{"text":"of conflicting versions. You could use this as the basis of a basic collaborative editor.","type":"text"},{"type":"text","text":" "},{"text":"Note that it contains a complete history of changes, including deletions, so it grows over time.","type":"text"},{"type":"text","text":" "},{"text":"If you need a more compact representation, consider using a merger instead.","type":"text"}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"MergeableArray"}],"url":"\/documentation\/forkedmerge\/mergeablearray"},"doc://ForkedMerge/documentation/ForkedMerge":{"url":"\/documentation\/forkedmerge","role":"collection","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","title":"ForkedMerge","kind":"symbol","abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Collection-Implementations":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Collection-Implementations","role":"collectionGroup","type":"topic","title":"Collection Implementations","url":"\/documentation\/forkedmerge\/mergeablearray\/collection-implementations","abstract":[],"kind":"article"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/split(separator:maxSplits:omittingEmptySubsequences:)":{"abstract":[{"type":"text","text":"Returns the longest possible subsequences of the collection, in order,"},{"type":"text","text":" "},{"type":"text","text":"around elements equal to the given element."}],"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"split","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"separator"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"maxSplits","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"omittingEmptySubsequences","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":") -> [","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sl11SubSequenceQa","text":"SubSequence"},{"text":"]","kind":"text"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/split(separator:maxSplits:omittingEmptySubsequences:)","title":"split(separator:maxSplits:omittingEmptySubsequences:)","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"text":".","type":"text"}]},"url":"\/documentation\/forkedmerge\/mergeablearray\/split(separator:maxsplits:omittingemptysubsequences:)","type":"topic","kind":"symbol"}}}
