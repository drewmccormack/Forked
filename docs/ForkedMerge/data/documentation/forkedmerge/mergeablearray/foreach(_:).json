{"kind":"symbol","primaryContentSections":[{"declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"forEach","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"text":"body","kind":"internalParam"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier","text":"Element"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"parameters":[{"name":"body","content":[{"inlineContent":[{"type":"text","text":"A closure that takes an element of the sequence as a"},{"text":" ","type":"text"},{"text":"parameter.","type":"text"}],"type":"paragraph"}]}],"kind":"parameters"},{"kind":"content","content":[{"text":"Discussion","level":2,"type":"heading","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"The two loops in the following example produce the same output:","type":"text"}]},{"code":["let numberWords = [\"one\", \"two\", \"three\"]","for word in numberWords {","    print(word)","}","\/\/ Prints \"one\"","\/\/ Prints \"two\"","\/\/ Prints \"three\"","","numberWords.forEach { word in","    print(word)","}","\/\/ Same as above"],"syntax":null,"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Using the "},{"type":"codeVoice","code":"forEach"},{"text":" method is distinct from a ","type":"text"},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"code":"in","type":"codeVoice"},{"type":"text","text":" loop in two"},{"type":"text","text":" "},{"type":"text","text":"important ways:"}],"type":"paragraph"},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You cannot use a "},{"type":"codeVoice","code":"break"},{"type":"text","text":" or "},{"code":"continue","type":"codeVoice"},{"text":" statement to exit the current","type":"text"},{"type":"text","text":" "},{"text":"call of the ","type":"text"},{"type":"codeVoice","code":"body"},{"text":" closure or skip subsequent calls.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Using the "},{"type":"codeVoice","code":"return"},{"text":" statement in the ","type":"text"},{"type":"codeVoice","code":"body"},{"text":" closure will exit only from","type":"text"},{"text":" ","type":"text"},{"text":"the current call to ","type":"text"},{"code":"body","type":"codeVoice"},{"type":"text","text":", not from any outer scope, and won’t skip"},{"type":"text","text":" "},{"type":"text","text":"subsequent calls."}]}]}]}]}],"identifier":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/forEach(_:)","interfaceLanguage":"swift"},"metadata":{"role":"symbol","roleHeading":"Instance Method","externalID":"s:STsE7forEachyyy7ElementQzKXEKF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"forEach"},{"kind":"text","text":"(("},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"}],"symbolKind":"method","title":"forEach(_:)","modules":[{"name":"ForkedMerge","relatedModules":["Swift"]}],"extendedModule":"Swift"},"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray"]]},"schemaVersion":{"minor":3,"patch":0,"major":0},"abstract":[{"type":"text","text":"Calls the given closure on each element in the sequence in the same order"},{"text":" ","type":"text"},{"type":"text","text":"as a "},{"code":"for","type":"codeVoice"},{"type":"text","text":"-"},{"code":"in","type":"codeVoice"},{"text":" loop.","type":"text"}],"variants":[{"paths":["\/documentation\/forkedmerge\/mergeablearray\/foreach(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/forEach(_:)":{"url":"\/documentation\/forkedmerge\/mergeablearray\/foreach(_:)","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/forEach(_:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"forEach"},{"text":"((","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"}],"abstract":[{"text":"Calls the given closure on each element in the sequence in the same order","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as a "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop."}],"kind":"symbol","title":"forEach(_:)","role":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"kind":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray","role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"MergeableArray","kind":"identifier"}],"navigatorTitle":[{"text":"MergeableArray","kind":"identifier"}],"abstract":[{"type":"text","text":"Represents a CRDT for an array of values, such as characters in a string."},{"type":"text","text":" "},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"type":"text","text":" "},{"type":"text","text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element"},{"text":" ","type":"text"},{"text":"may be present. Think about merging changes to text: If the user types the same word on two","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"devices at the same time, after the merge, you will have the same word twice — the value is"},{"text":" ","type":"text"},{"type":"text","text":"inserted twice, and there is no check that the value already exists in the array."},{"type":"text","text":" "},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"text":" ","type":"text"},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"type":"text","text":" "},{"text":"you should dedupe after every merge.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This type represents the array internally as a tree, which generally leads to more intuitive merging"},{"text":" ","type":"text"},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"type":"text","text":" "},{"text":"Note that it contains a complete history of changes, including deletions, so it grows over time.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"title":"MergeableArray","type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge":{"abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"type":"topic","kind":"symbol","title":"ForkedMerge","role":"collection","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","url":"\/documentation\/forkedmerge"}}}