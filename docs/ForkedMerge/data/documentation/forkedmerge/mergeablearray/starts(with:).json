{"kind":"symbol","identifier":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/starts(with:)","interfaceLanguage":"swift"},"abstract":[{"text":"Returns a Boolean value indicating whether the initial elements of the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"sequence are the same as the elements in another sequence."}],"metadata":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"starts"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"PossiblePrefix"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"with"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"PossiblePrefix"},{"text":") -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"roleHeading":"Instance Method","extendedModule":"Swift","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"title":"starts(with:)","externalID":"s:STsSQ7ElementRpzrlE6starts4withSbqd___tSTRd__AAQyd__ABRSlF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","role":"symbol","symbolKind":"method","modules":[{"relatedModules":["Swift"],"name":"ForkedMerge"}]},"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/mergeablearray\/starts(with:)"]}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"starts"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"PossiblePrefix"},{"text":">(","kind":"text"},{"text":"with","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"possiblePrefix","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"PossiblePrefix"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":" ","kind":"text"},{"text":"where","kind":"keyword"},{"kind":"text","text":" "},{"text":"PossiblePrefix","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","preciseIdentifier":"s:ST","text":"Sequence"},{"kind":"text","text":", "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"text":" == ","kind":"text"},{"text":"PossiblePrefix","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"}],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"possiblePrefix","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A sequence to compare to this sequence."}]}]}]},{"kind":"content","content":[{"anchor":"return-value","text":"Return Value","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"","type":"text"},{"type":"codeVoice","code":"true"},{"text":" if the initial elements of the sequence are the same as","type":"text"},{"text":" ","type":"text"},{"text":"the elements of ","type":"text"},{"type":"codeVoice","code":"possiblePrefix"},{"text":"; otherwise, ","type":"text"},{"code":"false","type":"codeVoice"},{"type":"text","text":". If"},{"type":"text","text":" "},{"type":"codeVoice","code":"possiblePrefix"},{"type":"text","text":" has no elements, the return value is "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}]}]},{"kind":"content","content":[{"anchor":"discussion","type":"heading","text":"Discussion","level":2},{"inlineContent":[{"type":"text","text":"This example tests whether one countable range begins with the elements"},{"text":" ","type":"text"},{"text":"of another countable range.","type":"text"}],"type":"paragraph"},{"syntax":null,"code":["let a = 1...3","let b = 1...10","","print(b.starts(with: a))","\/\/ Prints \"true\""],"type":"codeListing"},{"inlineContent":[{"text":"Passing a sequence with no elements or an empty collection as","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"possiblePrefix"},{"type":"text","text":" always results in "},{"code":"true","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"syntax":null,"code":["print(b.starts(with: []))","\/\/ Prints \"true\""],"type":"codeListing"},{"name":"Complexity","style":"note","content":[{"inlineContent":[{"type":"text","text":"O("},{"type":"emphasis","inlineContent":[{"type":"text","text":"m"}]},{"text":"), where ","type":"text"},{"inlineContent":[{"type":"text","text":"m"}],"type":"emphasis"},{"text":" is the lesser of the length of the","type":"text"},{"text":" ","type":"text"},{"text":"sequence and the length of ","type":"text"},{"type":"codeVoice","code":"possiblePrefix"},{"type":"text","text":"."}],"type":"paragraph"}],"type":"aside"}]}],"sections":[],"schemaVersion":{"major":0,"patch":0,"minor":3},"references":{"doc://ForkedMerge/documentation/ForkedMerge":{"abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"type":"topic","kind":"symbol","title":"ForkedMerge","role":"collection","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","url":"\/documentation\/forkedmerge"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"kind":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray","role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"MergeableArray","kind":"identifier"}],"navigatorTitle":[{"text":"MergeableArray","kind":"identifier"}],"abstract":[{"type":"text","text":"Represents a CRDT for an array of values, such as characters in a string."},{"type":"text","text":" "},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"type":"text","text":" "},{"type":"text","text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element"},{"text":" ","type":"text"},{"text":"may be present. Think about merging changes to text: If the user types the same word on two","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"devices at the same time, after the merge, you will have the same word twice â€” the value is"},{"text":" ","type":"text"},{"type":"text","text":"inserted twice, and there is no check that the value already exists in the array."},{"type":"text","text":" "},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"text":" ","type":"text"},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"type":"text","text":" "},{"text":"you should dedupe after every merge.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This type represents the array internally as a tree, which generally leads to more intuitive merging"},{"text":" ","type":"text"},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"type":"text","text":" "},{"text":"Note that it contains a complete history of changes, including deletions, so it grows over time.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"title":"MergeableArray","type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/starts(with:)":{"url":"\/documentation\/forkedmerge\/mergeablearray\/starts(with:)","role":"symbol","title":"starts(with:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"starts","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"PossiblePrefix"},{"text":">(","kind":"text"},{"text":"with","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"PossiblePrefix"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":"."}]},"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/starts(with:)","abstract":[{"type":"text","text":"Returns a Boolean value indicating whether the initial elements of the"},{"text":" ","type":"text"},{"type":"text","text":"sequence are the same as the elements in another sequence."}],"kind":"symbol","type":"topic"}}}