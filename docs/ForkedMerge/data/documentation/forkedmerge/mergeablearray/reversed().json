{"sections":[],"schemaVersion":{"minor":3,"major":0,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/reversed()"},"metadata":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"reversed","kind":"identifier"},{"text":"() -> ","kind":"text"},{"preciseIdentifier":"s:s18ReversedCollectionV","kind":"typeIdentifier","text":"ReversedCollection"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"extendedModule":"Swift","symbolKind":"method","title":"reversed()","roleHeading":"Instance Method","externalID":"s:SKsE8reverseds18ReversedCollectionVyxGyF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","modules":[{"relatedModules":["Swift"],"name":"ForkedMerge"}],"role":"symbol"},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"reversed","kind":"identifier"},{"kind":"text","text":"() -> "},{"text":"ReversedCollection","preciseIdentifier":"s:s18ReversedCollectionV","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"platforms":["macOS"],"languages":["swift"]}]},{"content":[{"anchor":"discussion","type":"heading","level":2,"text":"Discussion"},{"type":"paragraph","inlineContent":[{"text":"You can reverse a collection without allocating new space for its","type":"text"},{"type":"text","text":" "},{"type":"text","text":"elements by calling this "},{"code":"reversed()","type":"codeVoice"},{"text":" method. A ","type":"text"},{"type":"codeVoice","code":"ReversedCollection"},{"text":" ","type":"text"},{"type":"text","text":"instance wraps an underlying collection and provides access to its"},{"type":"text","text":" "},{"text":"elements in reverse order. This example prints the characters of a","type":"text"},{"text":" ","type":"text"},{"text":"string in reverse order:","type":"text"}]},{"syntax":null,"type":"codeListing","code":["let word = \"Backwards\"","for char in word.reversed() {","    print(char, terminator: \"\")","}","\/\/ Prints \"sdrawkcaB\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you need a reversed collection of the same type, you may be able to"},{"text":" ","type":"text"},{"type":"text","text":"use the collection’s sequence-based or collection-based initializer. For"},{"type":"text","text":" "},{"text":"example, to get the reversed version of a string, reverse its","type":"text"},{"text":" ","type":"text"},{"text":"characters and initialize a new ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" instance from the result."}]},{"type":"codeListing","code":["let reversedWord = String(word.reversed())","print(reversedWord)","\/\/ Prints \"sdrawkcaB\""],"syntax":null},{"type":"aside","style":"note","name":"Complexity","content":[{"type":"paragraph","inlineContent":[{"text":"O(1)","type":"text"}]}]}],"kind":"content"}],"abstract":[{"type":"text","text":"Returns a view presenting the elements of the collection in reverse"},{"type":"text","text":" "},{"type":"text","text":"order."}],"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray"]]},"kind":"symbol","variants":[{"paths":["\/documentation\/forkedmerge\/mergeablearray\/reversed()"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://ForkedMerge/documentation/ForkedMerge":{"abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"type":"topic","kind":"symbol","title":"ForkedMerge","role":"collection","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","url":"\/documentation\/forkedmerge"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/reversed()":{"url":"\/documentation\/forkedmerge\/mergeablearray\/reversed()","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/reversed()","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"reversed"},{"text":"() -> ","kind":"text"},{"text":"ReversedCollection","kind":"typeIdentifier","preciseIdentifier":"s:s18ReversedCollectionV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"abstract":[{"type":"text","text":"Returns a view presenting the elements of the collection in reverse"},{"type":"text","text":" "},{"type":"text","text":"order."}],"type":"topic","title":"reversed()","kind":"symbol","role":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"kind":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray","role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"MergeableArray","kind":"identifier"}],"navigatorTitle":[{"text":"MergeableArray","kind":"identifier"}],"abstract":[{"type":"text","text":"Represents a CRDT for an array of values, such as characters in a string."},{"type":"text","text":" "},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"type":"text","text":" "},{"type":"text","text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element"},{"text":" ","type":"text"},{"text":"may be present. Think about merging changes to text: If the user types the same word on two","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"devices at the same time, after the merge, you will have the same word twice — the value is"},{"text":" ","type":"text"},{"type":"text","text":"inserted twice, and there is no check that the value already exists in the array."},{"type":"text","text":" "},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"text":" ","type":"text"},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"type":"text","text":" "},{"text":"you should dedupe after every merge.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This type represents the array internally as a tree, which generally leads to more intuitive merging"},{"text":" ","type":"text"},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"type":"text","text":" "},{"text":"Note that it contains a complete history of changes, including deletions, so it grows over time.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"title":"MergeableArray","type":"topic"}}}