{"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"randomElement"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"using"},{"text":" ","kind":"text"},{"text":"generator","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":"? "},{"kind":"keyword","text":"where"},{"text":" ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","text":"RandomNumberGenerator","preciseIdentifier":"s:SG"}],"platforms":["macOS"]}]},{"kind":"parameters","parameters":[{"name":"generator","content":[{"inlineContent":[{"text":"The random number generator to use when choosing a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"random element."}],"type":"paragraph"}]}]},{"kind":"content","content":[{"type":"heading","anchor":"return-value","level":2,"text":"Return Value"},{"type":"paragraph","inlineContent":[{"text":"A random element from the collection. If the collection is","type":"text"},{"type":"text","text":" "},{"text":"empty, the method returns ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":".","type":"text"}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"inlineContent":[{"type":"text","text":"Call "},{"code":"randomElement(using:)","type":"codeVoice"},{"type":"text","text":" to select a random element from an array or"},{"type":"text","text":" "},{"type":"text","text":"another collection when you are using a custom random number generator."},{"type":"text","text":" "},{"type":"text","text":"This example picks a name at random from an array:"}],"type":"paragraph"},{"syntax":null,"code":["let names = [\"Zoey\", \"Chloe\", \"Amani\", \"Amaia\"]","let randomName = names.randomElement(using: &myGenerator)!","\/\/ randomName == \"Amani\""],"type":"codeListing"},{"type":"aside","content":[{"inlineContent":[{"text":"O(1) if the collection conforms to","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"RandomAccessCollection"},{"text":"; otherwise, O(","type":"text"},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"type":"text","text":"), where "},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"text":" is the length","type":"text"},{"type":"text","text":" "},{"text":"of the collection.","type":"text"}],"type":"paragraph"}],"style":"note","name":"Complexity"},{"name":"Note","type":"aside","style":"note","content":[{"inlineContent":[{"type":"text","text":"The algorithm used to select a random element may change in a"},{"text":" ","type":"text"},{"type":"text","text":"future version of Swift. If you’re passing a generator that results in"},{"type":"text","text":" "},{"text":"the same sequence of elements each time you run your program, that","type":"text"},{"text":" ","type":"text"},{"text":"sequence may change when your program is compiled using a different","type":"text"},{"text":" ","type":"text"},{"text":"version of Swift.","type":"text"}],"type":"paragraph"}]}]}],"kind":"symbol","abstract":[{"type":"text","text":"Returns a random element of the collection, using the given generator as"},{"text":" ","type":"text"},{"type":"text","text":"a source for randomness."}],"sections":[],"variants":[{"paths":["\/documentation\/forkedmerge\/mergeablearray\/randomelement(using:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/randomElement(using:)","interfaceLanguage":"swift"},"metadata":{"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"randomElement","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"text":"using","kind":"externalParam"},{"kind":"text","text":": "},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"extendedModule":"Swift","roleHeading":"Instance Method","modules":[{"relatedModules":["Swift"],"name":"ForkedMerge"}],"title":"randomElement(using:)","externalID":"s:SlsE13randomElement5using0B0QzSgqd__z_tSGRd__lF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","symbolKind":"method"},"schemaVersion":{"patch":0,"major":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Collection-Implementations"]]},"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Collection-Implementations":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Collection-Implementations","role":"collectionGroup","type":"topic","title":"Collection Implementations","url":"\/documentation\/forkedmerge\/mergeablearray\/collection-implementations","abstract":[],"kind":"article"},"doc://ForkedMerge/documentation/ForkedMerge":{"url":"\/documentation\/forkedmerge","role":"collection","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","title":"ForkedMerge","kind":"symbol","abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"kind":"symbol","role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","navigatorTitle":[{"text":"MergeableArray","kind":"identifier"}],"title":"MergeableArray","abstract":[{"type":"text","text":"Represents a CRDT for an array of values, such as characters in a string."},{"type":"text","text":" "},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"text":" ","type":"text"},{"type":"text","text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element"},{"type":"text","text":" "},{"text":"may be present. Think about merging changes to text: If the user types the same word on two","type":"text"},{"type":"text","text":" "},{"type":"text","text":"devices at the same time, after the merge, you will have the same word twice — the value is"},{"type":"text","text":" "},{"type":"text","text":"inserted twice, and there is no check that the value already exists in the array."},{"type":"text","text":" "},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"type":"text","text":" "},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"type":"text","text":" "},{"text":"you should dedupe after every merge.","type":"text"},{"type":"text","text":" "},{"text":"This type represents the array internally as a tree, which generally leads to more intuitive merging","type":"text"},{"text":" ","type":"text"},{"text":"of conflicting versions. You could use this as the basis of a basic collaborative editor.","type":"text"},{"type":"text","text":" "},{"text":"Note that it contains a complete history of changes, including deletions, so it grows over time.","type":"text"},{"type":"text","text":" "},{"text":"If you need a more compact representation, consider using a merger instead.","type":"text"}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"MergeableArray"}],"url":"\/documentation\/forkedmerge\/mergeablearray"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/randomElement(using:)":{"url":"\/documentation\/forkedmerge\/mergeablearray\/randomelement(using:)","kind":"symbol","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"randomElement"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"text":"using","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"kind":"text","text":"?"}],"abstract":[{"type":"text","text":"Returns a random element of the collection, using the given generator as"},{"text":" ","type":"text"},{"type":"text","text":"a source for randomness."}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/randomElement(using:)","type":"topic","title":"randomElement(using:)"}}}
