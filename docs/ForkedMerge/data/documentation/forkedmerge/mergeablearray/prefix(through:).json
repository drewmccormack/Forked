{"schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[],"metadata":{"symbolKind":"method","externalID":"s:SlsE6prefix7through11SubSequenceQz5IndexQz_tF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","title":"prefix(through:)","modules":[{"name":"ForkedMerge","relatedModules":["Swift"]}],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"prefix"},{"text":"(","kind":"text"},{"text":"through","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:Sl5IndexQa","kind":"typeIdentifier","text":"Index"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"SubSequence","kind":"typeIdentifier","preciseIdentifier":"s:Sl11SubSequenceQa"}],"roleHeading":"Instance Method","role":"symbol","extendedModule":"Swift"},"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Collection-Implementations"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"prefix","kind":"identifier"},{"kind":"text","text":"("},{"text":"through","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"position","kind":"internalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:Sl5IndexQa","text":"Index"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sl11SubSequenceQa","text":"SubSequence"}]}]},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The index of the last element to include in the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"resulting subsequence. "},{"type":"codeVoice","code":"position"},{"type":"text","text":" must be a valid index of the collection"},{"type":"text","text":" "},{"type":"text","text":"that is not equal to the "},{"code":"endIndex","type":"codeVoice"},{"type":"text","text":" property."}]}],"name":"position"}]},{"content":[{"anchor":"return-value","text":"Return Value","level":2,"type":"heading"},{"inlineContent":[{"text":"A subsequence up to, and including, the given position.","type":"text"}],"type":"paragraph"}],"kind":"content"},{"kind":"content","content":[{"type":"heading","anchor":"discussion","level":2,"text":"Discussion"},{"inlineContent":[{"type":"text","text":"The resulting subsequence "},{"inlineContent":[{"type":"text","text":"includes"}],"type":"emphasis"},{"type":"text","text":" the element at the position"},{"text":" ","type":"text"},{"text":"specified by the ","type":"text"},{"type":"codeVoice","code":"through"},{"type":"text","text":" parameter."},{"text":" ","type":"text"},{"type":"text","text":"The following example searches for the index of the number "},{"type":"codeVoice","code":"40"},{"type":"text","text":" in an"},{"text":" ","type":"text"},{"type":"text","text":"array of integers, and then prints the prefix of the array up to, and"},{"type":"text","text":" "},{"type":"text","text":"including, that index:"}],"type":"paragraph"},{"syntax":null,"code":["let numbers = [10, 20, 30, 40, 50, 60]","if let i = numbers.firstIndex(of: 40) {","    print(numbers.prefix(through: i))","}","\/\/ Prints \"[10, 20, 30, 40]\""],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Using the "},{"type":"codeVoice","code":"prefix(through:)"},{"type":"text","text":" method is equivalent to using a partial"},{"type":"text","text":" "},{"text":"closed range as the collection’s subscript. The subscript notation is","type":"text"},{"type":"text","text":" "},{"text":"preferred over ","type":"text"},{"code":"prefix(through:)","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"code":["if let i = numbers.firstIndex(of: 40) {","    print(numbers[...i])","}","\/\/ Prints \"[10, 20, 30, 40]\""],"syntax":null,"type":"codeListing"},{"content":[{"inlineContent":[{"type":"text","text":"O(1)"}],"type":"paragraph"}],"type":"aside","style":"note","name":"Complexity"}]}],"abstract":[{"type":"text","text":"Returns a subsequence from the start of the collection through the"},{"text":" ","type":"text"},{"type":"text","text":"specified position."}],"variants":[{"paths":["\/documentation\/forkedmerge\/mergeablearray\/prefix(through:)"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","identifier":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/prefix(through:)","interfaceLanguage":"swift"},"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/prefix(through:)":{"role":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray\/prefix(through:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"prefix"},{"kind":"text","text":"("},{"kind":"externalParam","text":"through"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Index","preciseIdentifier":"s:Sl5IndexQa"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"SubSequence","preciseIdentifier":"s:Sl11SubSequenceQa","kind":"typeIdentifier"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/prefix(through:)","title":"prefix(through:)","abstract":[{"type":"text","text":"Returns a subsequence from the start of the collection through the"},{"text":" ","type":"text"},{"type":"text","text":"specified position."}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"kind":"symbol","role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","navigatorTitle":[{"text":"MergeableArray","kind":"identifier"}],"title":"MergeableArray","abstract":[{"type":"text","text":"Represents a CRDT for an array of values, such as characters in a string."},{"type":"text","text":" "},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"text":" ","type":"text"},{"type":"text","text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element"},{"type":"text","text":" "},{"text":"may be present. Think about merging changes to text: If the user types the same word on two","type":"text"},{"type":"text","text":" "},{"type":"text","text":"devices at the same time, after the merge, you will have the same word twice — the value is"},{"type":"text","text":" "},{"type":"text","text":"inserted twice, and there is no check that the value already exists in the array."},{"type":"text","text":" "},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"type":"text","text":" "},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"type":"text","text":" "},{"text":"you should dedupe after every merge.","type":"text"},{"type":"text","text":" "},{"text":"This type represents the array internally as a tree, which generally leads to more intuitive merging","type":"text"},{"text":" ","type":"text"},{"text":"of conflicting versions. You could use this as the basis of a basic collaborative editor.","type":"text"},{"type":"text","text":" "},{"text":"Note that it contains a complete history of changes, including deletions, so it grows over time.","type":"text"},{"type":"text","text":" "},{"text":"If you need a more compact representation, consider using a merger instead.","type":"text"}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"MergeableArray"}],"url":"\/documentation\/forkedmerge\/mergeablearray"},"doc://ForkedMerge/documentation/ForkedMerge":{"url":"\/documentation\/forkedmerge","role":"collection","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","title":"ForkedMerge","kind":"symbol","abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Collection-Implementations":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Collection-Implementations","role":"collectionGroup","type":"topic","title":"Collection Implementations","url":"\/documentation\/forkedmerge\/mergeablearray\/collection-implementations","abstract":[],"kind":"article"}}}
