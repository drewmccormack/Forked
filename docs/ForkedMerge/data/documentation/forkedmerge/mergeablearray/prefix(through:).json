{"metadata":{"modules":[{"name":"ForkedMerge","relatedModules":["Swift"]}],"title":"prefix(through:)","extendedModule":"Swift","symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"prefix","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"through"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sl5IndexQa","text":"Index"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"SubSequence","kind":"typeIdentifier","preciseIdentifier":"s:Sl11SubSequenceQa"}],"externalID":"s:SlsE6prefix7through11SubSequenceQz5IndexQz_tF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","role":"symbol","roleHeading":"Instance Method"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/mergeablearray\/prefix(through:)"]}],"abstract":[{"text":"Returns a subsequence from the start of the collection through the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"specified position."}],"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray"]]},"schemaVersion":{"minor":3,"patch":0,"major":0},"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/prefix(through:)"},"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"prefix"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"through"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"position"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Index","preciseIdentifier":"s:Sl5IndexQa","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"SubSequence","kind":"typeIdentifier","preciseIdentifier":"s:Sl11SubSequenceQa"}]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"position","content":[{"inlineContent":[{"text":"The index of the last element to include in the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"resulting subsequence. "},{"type":"codeVoice","code":"position"},{"text":" must be a valid index of the collection","type":"text"},{"type":"text","text":" "},{"text":"that is not equal to the ","type":"text"},{"code":"endIndex","type":"codeVoice"},{"text":" property.","type":"text"}],"type":"paragraph"}]}]},{"content":[{"level":2,"text":"Return Value","anchor":"return-value","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A subsequence up to, and including, the given position."}]}],"kind":"content"},{"kind":"content","content":[{"anchor":"discussion","level":2,"text":"Discussion","type":"heading"},{"inlineContent":[{"text":"The resulting subsequence ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"includes"}]},{"text":" the element at the position","type":"text"},{"type":"text","text":" "},{"type":"text","text":"specified by the "},{"type":"codeVoice","code":"through"},{"text":" parameter.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The following example searches for the index of the number "},{"type":"codeVoice","code":"40"},{"type":"text","text":" in an"},{"type":"text","text":" "},{"type":"text","text":"array of integers, and then prints the prefix of the array up to, and"},{"text":" ","type":"text"},{"text":"including, that index:","type":"text"}],"type":"paragraph"},{"code":["let numbers = [10, 20, 30, 40, 50, 60]","if let i = numbers.firstIndex(of: 40) {","    print(numbers.prefix(through: i))","}","\/\/ Prints \"[10, 20, 30, 40]\""],"type":"codeListing","syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using the "},{"code":"prefix(through:)","type":"codeVoice"},{"type":"text","text":" method is equivalent to using a partial"},{"text":" ","type":"text"},{"text":"closed range as the collection’s subscript. The subscript notation is","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"preferred over "},{"type":"codeVoice","code":"prefix(through:)"},{"type":"text","text":"."}]},{"syntax":null,"type":"codeListing","code":["if let i = numbers.firstIndex(of: 40) {","    print(numbers[...i])","}","\/\/ Prints \"[10, 20, 30, 40]\""]},{"type":"aside","name":"Complexity","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"O(1)"}]}]}]}],"kind":"symbol","references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"navigatorTitle":[{"text":"MergeableArray","kind":"identifier"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Represents a CRDT for an array of values, such as characters in a string."},{"text":" ","type":"text"},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"text":" ","type":"text"},{"text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element","type":"text"},{"type":"text","text":" "},{"text":"may be present. Think about merging changes to text: If the user types the same word on two","type":"text"},{"type":"text","text":" "},{"text":"devices at the same time, after the merge, you will have the same word twice — the value is","type":"text"},{"text":" ","type":"text"},{"text":"inserted twice, and there is no check that the value already exists in the array.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"text":" ","type":"text"},{"text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you should dedupe after every merge."},{"type":"text","text":" "},{"type":"text","text":"This type represents the array internally as a tree, which generally leads to more intuitive merging"},{"type":"text","text":" "},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"text":" ","type":"text"},{"text":"Note that it contains a complete history of changes, including deletions, so it grows over time.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"url":"\/documentation\/forkedmerge\/mergeablearray","title":"MergeableArray","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MergeableArray","kind":"identifier"}]},"doc://ForkedMerge/documentation/ForkedMerge":{"abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"title":"ForkedMerge","role":"collection","url":"\/documentation\/forkedmerge","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","kind":"symbol","type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/prefix(through:)":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/prefix(through:)","type":"topic","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"prefix","kind":"identifier"},{"text":"(","kind":"text"},{"text":"through","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"preciseIdentifier":"s:Sl5IndexQa","kind":"typeIdentifier","text":"Index"},{"kind":"text","text":") -> "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"SubSequence","preciseIdentifier":"s:Sl11SubSequenceQa"}],"url":"\/documentation\/forkedmerge\/mergeablearray\/prefix(through:)","title":"prefix(through:)","kind":"symbol","abstract":[{"type":"text","text":"Returns a subsequence from the start of the collection through the"},{"type":"text","text":" "},{"text":"specified position.","type":"text"}]}}}