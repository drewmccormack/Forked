{"kind":"symbol","schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"extendedModule":"Swift","externalID":"s:SKsE9lastIndex5where0B0QzSgSb7ElementQzKXE_tKF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"lastIndex"},{"kind":"text","text":"("},{"text":"where","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Index","preciseIdentifier":"s:Sl5IndexQa"},{"text":"?","kind":"text"}],"title":"lastIndex(where:)","modules":[{"relatedModules":["Swift"],"name":"ForkedMerge"}],"role":"symbol","roleHeading":"Instance Method","symbolKind":"method"},"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"lastIndex","kind":"identifier"},{"kind":"text","text":"("},{"text":"where","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"predicate","kind":"internalParam"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:Sl5IndexQa","text":"Index","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"languages":["swift"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"content":[{"inlineContent":[{"type":"text","text":"A closure that takes an element as its argument"},{"text":" ","type":"text"},{"type":"text","text":"and returns a Boolean value that indicates whether the passed element"},{"type":"text","text":" "},{"type":"text","text":"represents a match."}],"type":"paragraph"}],"name":"predicate"}]},{"kind":"content","content":[{"anchor":"return-value","level":2,"text":"Return Value","type":"heading"},{"inlineContent":[{"text":"The index of the last element in the collection that matches","type":"text"},{"type":"text","text":" "},{"code":"predicate","type":"codeVoice"},{"text":", or ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":" if no elements match."}],"type":"paragraph"}]},{"kind":"content","content":[{"type":"heading","anchor":"discussion","text":"Discussion","level":2},{"inlineContent":[{"type":"text","text":"You can use the predicate to find an element of a type that doesn’t"},{"type":"text","text":" "},{"text":"conform to the ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" protocol or to find an element that matches"},{"text":" ","type":"text"},{"text":"particular criteria. This example finds the index of the last name that","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"begins with the letter "},{"type":"emphasis","inlineContent":[{"text":"A:","type":"text"}]}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["let students = [\"Kofi\", \"Abena\", \"Peter\", \"Kweku\", \"Akosua\"]","if let i = students.lastIndex(where: { $0.hasPrefix(\"A\") }) {","    print(\"\\(students[i]) starts with 'A'!\")","}","\/\/ Prints \"Akosua starts with 'A'!\""]},{"content":[{"inlineContent":[{"type":"text","text":"O("},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"type":"text","text":"), where "},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"text":" is the length of the collection.","type":"text"}],"type":"paragraph"}],"style":"note","type":"aside","name":"Complexity"}]}],"sections":[],"identifier":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/lastIndex(where:)","interfaceLanguage":"swift"},"abstract":[{"text":"Returns the index of the last element in the collection that matches the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"given predicate."}],"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray"]]},"variants":[{"paths":["\/documentation\/forkedmerge\/mergeablearray\/lastindex(where:)"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/lastIndex(where:)":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/lastIndex(where:)","type":"topic","title":"lastIndex(where:)","url":"\/documentation\/forkedmerge\/mergeablearray\/lastindex(where:)","role":"symbol","kind":"symbol","abstract":[{"text":"Returns the index of the last element in the collection that matches the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"given predicate."}],"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"lastIndex"},{"text":"(","kind":"text"},{"text":"where","kind":"externalParam"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:ST7ElementQa"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Index","preciseIdentifier":"s:Sl5IndexQa","kind":"typeIdentifier"},{"kind":"text","text":"?"}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"navigatorTitle":[{"text":"MergeableArray","kind":"identifier"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Represents a CRDT for an array of values, such as characters in a string."},{"text":" ","type":"text"},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"text":" ","type":"text"},{"text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element","type":"text"},{"type":"text","text":" "},{"text":"may be present. Think about merging changes to text: If the user types the same word on two","type":"text"},{"type":"text","text":" "},{"text":"devices at the same time, after the merge, you will have the same word twice — the value is","type":"text"},{"text":" ","type":"text"},{"text":"inserted twice, and there is no check that the value already exists in the array.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"text":" ","type":"text"},{"text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you should dedupe after every merge."},{"type":"text","text":" "},{"type":"text","text":"This type represents the array internally as a tree, which generally leads to more intuitive merging"},{"type":"text","text":" "},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"text":" ","type":"text"},{"text":"Note that it contains a complete history of changes, including deletions, so it grows over time.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"url":"\/documentation\/forkedmerge\/mergeablearray","title":"MergeableArray","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MergeableArray","kind":"identifier"}]},"doc://ForkedMerge/documentation/ForkedMerge":{"abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"title":"ForkedMerge","role":"collection","url":"\/documentation\/forkedmerge","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","kind":"symbol","type":"topic"}}}