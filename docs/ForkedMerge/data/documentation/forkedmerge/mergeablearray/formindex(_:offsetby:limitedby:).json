{"sections":[],"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Collection-Implementations"]]},"abstract":[{"type":"text","text":"Offsets the given index by the specified distance, or so that it equals"},{"text":" ","type":"text"},{"type":"text","text":"the given limiting index."}],"kind":"symbol","variants":[{"paths":["\/documentation\/forkedmerge\/mergeablearray\/formindex(_:offsetby:limitedby:)"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/formIndex(_:offsetBy:limitedBy:)","interfaceLanguage":"swift"},"metadata":{"title":"formIndex(_:offsetBy:limitedBy:)","modules":[{"name":"ForkedMerge","relatedModules":["Swift"]}],"role":"symbol","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"formIndex","kind":"identifier"},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:Sl5IndexQa","text":"Index"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"offsetBy"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"limitedBy"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sl5IndexQa","text":"Index"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"extendedModule":"Swift","symbolKind":"method","externalID":"s:SlsE9formIndex_8offsetBy07limitedD0Sb0B0Qzz_SiAEtF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV"},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"formIndex","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"i"},{"text":": ","kind":"text"},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sl5IndexQa","text":"Index"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"offsetBy"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"distance"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"text":", ","kind":"text"},{"text":"limitedBy","kind":"externalParam"},{"kind":"text","text":" "},{"kind":"internalParam","text":"limit"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sl5IndexQa","text":"Index"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"platforms":["macOS"],"languages":["swift"]}]},{"kind":"parameters","parameters":[{"name":"i","content":[{"inlineContent":[{"text":"A valid index of the collection.","type":"text"}],"type":"paragraph"}]},{"name":"distance","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The distance to offset "},{"type":"codeVoice","code":"i"},{"text":". ","type":"text"},{"type":"codeVoice","code":"distance"},{"type":"text","text":" must not be negative"},{"type":"text","text":" "},{"text":"unless the collection conforms to the ","type":"text"},{"type":"codeVoice","code":"BidirectionalCollection"},{"text":" ","type":"text"},{"text":"protocol.","type":"text"}]}]},{"name":"limit","content":[{"inlineContent":[{"text":"A valid index of the collection to use as a limit. If","type":"text"},{"type":"text","text":" "},{"code":"distance > 0","type":"codeVoice"},{"text":", a limit that is less than ","type":"text"},{"type":"codeVoice","code":"i"},{"text":" has no effect.","type":"text"},{"text":" ","type":"text"},{"text":"Likewise, if ","type":"text"},{"type":"codeVoice","code":"distance < 0"},{"text":", a limit that is greater than ","type":"text"},{"type":"codeVoice","code":"i"},{"type":"text","text":" has no"},{"type":"text","text":" "},{"type":"text","text":"effect."}],"type":"paragraph"}]}]},{"kind":"content","content":[{"level":2,"anchor":"return-value","type":"heading","text":"Return Value"},{"inlineContent":[{"text":"","type":"text"},{"type":"codeVoice","code":"true"},{"text":" if ","type":"text"},{"type":"codeVoice","code":"i"},{"text":" has been offset by exactly ","type":"text"},{"type":"codeVoice","code":"distance"},{"type":"text","text":" steps"},{"text":" ","type":"text"},{"type":"text","text":"without going beyond "},{"code":"limit","type":"codeVoice"},{"type":"text","text":"; otherwise, "},{"type":"codeVoice","code":"false"},{"text":". When the return","type":"text"},{"text":" ","type":"text"},{"text":"value is ","type":"text"},{"type":"codeVoice","code":"false"},{"text":", the value of ","type":"text"},{"code":"i","type":"codeVoice"},{"type":"text","text":" is equal to "},{"type":"codeVoice","code":"limit"},{"type":"text","text":"."}],"type":"paragraph"}]},{"kind":"content","content":[{"level":2,"type":"heading","text":"Discussion","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"The value passed as ","type":"text"},{"code":"distance","type":"codeVoice"},{"text":" must not offset ","type":"text"},{"code":"i","type":"codeVoice"},{"type":"text","text":" beyond the bounds of"},{"text":" ","type":"text"},{"type":"text","text":"the collection, unless the index passed as "},{"type":"codeVoice","code":"limit"},{"text":" prevents offsetting","type":"text"},{"type":"text","text":" "},{"text":"beyond those bounds.","type":"text"}]},{"content":[{"inlineContent":[{"text":"O(1) if the collection conforms to","type":"text"},{"type":"text","text":" "},{"code":"RandomAccessCollection","type":"codeVoice"},{"type":"text","text":"; otherwise, O("},{"type":"emphasis","inlineContent":[{"text":"k","type":"text"}]},{"text":"), where ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"k"}]},{"type":"text","text":" is the absolute"},{"text":" ","type":"text"},{"type":"text","text":"value of "},{"type":"codeVoice","code":"distance"},{"type":"text","text":"."}],"type":"paragraph"}],"name":"Complexity","style":"note","type":"aside"}]}],"references":{"doc://ForkedMerge/documentation/ForkedMerge":{"url":"\/documentation\/forkedmerge","role":"collection","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","title":"ForkedMerge","kind":"symbol","abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Collection-Implementations":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Collection-Implementations","role":"collectionGroup","type":"topic","title":"Collection Implementations","url":"\/documentation\/forkedmerge\/mergeablearray\/collection-implementations","abstract":[],"kind":"article"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/formIndex(_:offsetBy:limitedBy:)":{"url":"\/documentation\/forkedmerge\/mergeablearray\/formindex(_:offsetby:limitedby:)","kind":"symbol","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"formIndex"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"preciseIdentifier":"s:Sl5IndexQa","kind":"typeIdentifier","text":"Index"},{"kind":"text","text":", "},{"text":"offsetBy","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"text":"limitedBy","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:Sl5IndexQa","text":"Index","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Offsets the given index by the specified distance, or so that it equals"},{"type":"text","text":" "},{"text":"the given limiting index.","type":"text"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/formIndex(_:offsetBy:limitedBy:)","type":"topic","title":"formIndex(_:offsetBy:limitedBy:)"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"kind":"symbol","role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","navigatorTitle":[{"text":"MergeableArray","kind":"identifier"}],"title":"MergeableArray","abstract":[{"type":"text","text":"Represents a CRDT for an array of values, such as characters in a string."},{"type":"text","text":" "},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"text":" ","type":"text"},{"type":"text","text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element"},{"type":"text","text":" "},{"text":"may be present. Think about merging changes to text: If the user types the same word on two","type":"text"},{"type":"text","text":" "},{"type":"text","text":"devices at the same time, after the merge, you will have the same word twice â€” the value is"},{"type":"text","text":" "},{"type":"text","text":"inserted twice, and there is no check that the value already exists in the array."},{"type":"text","text":" "},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"type":"text","text":" "},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"type":"text","text":" "},{"text":"you should dedupe after every merge.","type":"text"},{"type":"text","text":" "},{"text":"This type represents the array internally as a tree, which generally leads to more intuitive merging","type":"text"},{"text":" ","type":"text"},{"text":"of conflicting versions. You could use this as the basis of a basic collaborative editor.","type":"text"},{"type":"text","text":" "},{"text":"Note that it contains a complete history of changes, including deletions, so it grows over time.","type":"text"},{"type":"text","text":" "},{"text":"If you need a more compact representation, consider using a merger instead.","type":"text"}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"MergeableArray"}],"url":"\/documentation\/forkedmerge\/mergeablearray"}}}
