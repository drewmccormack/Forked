{"kind":"symbol","metadata":{"roleHeading":"Instance Method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"prefix"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"SubSequence","kind":"typeIdentifier","preciseIdentifier":"s:Sl11SubSequenceQa"}],"title":"prefix(_:)","symbolKind":"method","externalID":"s:SlsE6prefixy11SubSequenceQzSiF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","modules":[{"relatedModules":["Swift"],"name":"ForkedMerge"}],"extendedModule":"Swift","role":"symbol"},"abstract":[{"text":"Returns a subsequence, up to the specified maximum length, containing","type":"text"},{"text":" ","type":"text"},{"text":"the initial elements of the collection.","type":"text"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"prefix"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"maxLength","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"SubSequence","kind":"typeIdentifier","preciseIdentifier":"s:Sl11SubSequenceQa"}],"platforms":["macOS"]}]},{"kind":"parameters","parameters":[{"content":[{"inlineContent":[{"type":"text","text":"The maximum number of elements to return."},{"type":"text","text":" "},{"type":"codeVoice","code":"maxLength"},{"type":"text","text":" must be greater than or equal to zero."}],"type":"paragraph"}],"name":"maxLength"}]},{"content":[{"level":2,"anchor":"return-value","text":"Return Value","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A subsequence starting at the beginning of this collection"},{"type":"text","text":" "},{"text":"with at most ","type":"text"},{"type":"codeVoice","code":"maxLength"},{"text":" elements.","type":"text"}]}],"kind":"content"},{"kind":"content","content":[{"type":"heading","text":"Discussion","anchor":"discussion","level":2},{"inlineContent":[{"type":"text","text":"If the maximum length exceeds the number of elements in the collection,"},{"type":"text","text":" "},{"type":"text","text":"the result contains all the elements in the collection."}],"type":"paragraph"},{"syntax":null,"code":["let numbers = [1, 2, 3, 4, 5]","print(numbers.prefix(2))","\/\/ Prints \"[1, 2]\"","print(numbers.prefix(10))","\/\/ Prints \"[1, 2, 3, 4, 5]\""],"type":"codeListing"},{"name":"Complexity","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"O(1) if the collection conforms to"},{"text":" ","type":"text"},{"type":"codeVoice","code":"RandomAccessCollection"},{"type":"text","text":"; otherwise, O("},{"type":"emphasis","inlineContent":[{"text":"k","type":"text"}]},{"text":"), where ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"k","type":"text"}]},{"text":" is the number of","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"elements to select from the beginning of the collection."}]}],"type":"aside"}]}],"variants":[{"paths":["\/documentation\/forkedmerge\/mergeablearray\/prefix(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/prefix(_:)"},"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Collection-Implementations"]]},"references":{"doc://ForkedMerge/documentation/ForkedMerge":{"url":"\/documentation\/forkedmerge","role":"collection","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","title":"ForkedMerge","kind":"symbol","abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"kind":"symbol","role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","navigatorTitle":[{"text":"MergeableArray","kind":"identifier"}],"title":"MergeableArray","abstract":[{"type":"text","text":"Represents a CRDT for an array of values, such as characters in a string."},{"type":"text","text":" "},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"text":" ","type":"text"},{"type":"text","text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element"},{"type":"text","text":" "},{"text":"may be present. Think about merging changes to text: If the user types the same word on two","type":"text"},{"type":"text","text":" "},{"type":"text","text":"devices at the same time, after the merge, you will have the same word twice â€” the value is"},{"type":"text","text":" "},{"type":"text","text":"inserted twice, and there is no check that the value already exists in the array."},{"type":"text","text":" "},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"type":"text","text":" "},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"type":"text","text":" "},{"text":"you should dedupe after every merge.","type":"text"},{"type":"text","text":" "},{"text":"This type represents the array internally as a tree, which generally leads to more intuitive merging","type":"text"},{"text":" ","type":"text"},{"text":"of conflicting versions. You could use this as the basis of a basic collaborative editor.","type":"text"},{"type":"text","text":" "},{"text":"Note that it contains a complete history of changes, including deletions, so it grows over time.","type":"text"},{"type":"text","text":" "},{"text":"If you need a more compact representation, consider using a merger instead.","type":"text"}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"MergeableArray"}],"url":"\/documentation\/forkedmerge\/mergeablearray"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Collection-Implementations":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Collection-Implementations","role":"collectionGroup","type":"topic","title":"Collection Implementations","url":"\/documentation\/forkedmerge\/mergeablearray\/collection-implementations","abstract":[],"kind":"article"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/prefix(_:)":{"role":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray\/prefix(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"prefix"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"SubSequence","preciseIdentifier":"s:Sl11SubSequenceQa"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/prefix(_:)","title":"prefix(_:)","abstract":[{"type":"text","text":"Returns a subsequence, up to the specified maximum length, containing"},{"text":" ","type":"text"},{"type":"text","text":"the initial elements of the collection."}]}}}
