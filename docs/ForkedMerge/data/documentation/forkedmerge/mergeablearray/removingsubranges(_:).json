{"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"removingSubranges"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"text":"subranges","kind":"internalParam"},{"kind":"text","text":": "},{"text":"RangeSet","kind":"typeIdentifier","preciseIdentifier":"s:s8RangeSetV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Index","preciseIdentifier":"s:Sl5IndexQa"},{"text":">) -> ","kind":"text"},{"preciseIdentifier":"s:s18DiscontiguousSliceV","text":"DiscontiguousSlice","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}],"platforms":["macOS"]}]},{"kind":"parameters","parameters":[{"name":"subranges","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A range set representing the indices of the"},{"text":" ","type":"text"},{"type":"text","text":"elements to remove."}]}]}]},{"kind":"content","content":[{"anchor":"return-value","type":"heading","text":"Return Value","level":2},{"inlineContent":[{"type":"text","text":"A collection of the elements that are not in "},{"type":"codeVoice","code":"subranges"},{"text":".","type":"text"}],"type":"paragraph"}]},{"kind":"content","content":[{"type":"heading","text":"Discussion","level":2,"anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"For example, this code sample finds the indices of all the vowel","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"characters in the string, and then retrieves a collection that omits"},{"text":" ","type":"text"},{"type":"text","text":"those characters."}]},{"code":["let str = \"The rain in Spain stays mainly in the plain.\"","let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]","let vowelIndices = str.subranges(where: { vowels.contains($0) })","","let disemvoweled = str.removingSubranges(vowelIndices)","print(String(disemvoweled))","\/\/ Prints \"Th rn n Spn stys mnly n th pln.\""],"type":"codeListing","syntax":null},{"content":[{"inlineContent":[{"type":"text","text":"O("},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"text":"), where ","type":"text"},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"text":" is the length of the collection.","type":"text"}],"type":"paragraph"}],"name":"Complexity","style":"note","type":"aside"}]}],"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/removingSubranges(_:)"},"schemaVersion":{"patch":0,"major":0,"minor":3},"kind":"symbol","sections":[],"metadata":{"role":"symbol","modules":[{"relatedModules":["Swift"],"name":"ForkedMerge"}],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"removingSubranges"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:s8RangeSetV","text":"RangeSet"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Index","preciseIdentifier":"s:Sl5IndexQa"},{"kind":"text","text":">) -> "},{"text":"DiscontiguousSlice","kind":"typeIdentifier","preciseIdentifier":"s:s18DiscontiguousSliceV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}],"roleHeading":"Instance Method","extendedModule":"Swift","externalID":"s:SlsE17removingSubrangesys18DiscontiguousSliceVyxGs8RangeSetVy5IndexQzGF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","symbolKind":"method","platforms":[{"unavailable":false,"introducedAt":"18.0","name":"iOS","beta":false,"deprecated":false},{"unavailable":false,"beta":false,"introducedAt":"15.0","deprecated":false,"name":"macOS"},{"beta":false,"unavailable":false,"deprecated":false,"name":"tvOS","introducedAt":"18.0"},{"name":"visionOS","introducedAt":"2.0","beta":false,"deprecated":false,"unavailable":false},{"beta":false,"unavailable":false,"deprecated":false,"name":"watchOS","introducedAt":"11.0"}],"title":"removingSubranges(_:)"},"abstract":[{"type":"text","text":"Returns a collection of the elements in this collection that are not"},{"text":" ","type":"text"},{"text":"represented by the given range set.","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/mergeablearray\/removingsubranges(_:)"]}],"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"navigatorTitle":[{"text":"MergeableArray","kind":"identifier"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Represents a CRDT for an array of values, such as characters in a string."},{"text":" ","type":"text"},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"text":" ","type":"text"},{"text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element","type":"text"},{"type":"text","text":" "},{"text":"may be present. Think about merging changes to text: If the user types the same word on two","type":"text"},{"type":"text","text":" "},{"text":"devices at the same time, after the merge, you will have the same word twice â€” the value is","type":"text"},{"text":" ","type":"text"},{"text":"inserted twice, and there is no check that the value already exists in the array.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"text":" ","type":"text"},{"text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you should dedupe after every merge."},{"type":"text","text":" "},{"type":"text","text":"This type represents the array internally as a tree, which generally leads to more intuitive merging"},{"type":"text","text":" "},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"text":" ","type":"text"},{"text":"Note that it contains a complete history of changes, including deletions, so it grows over time.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"url":"\/documentation\/forkedmerge\/mergeablearray","title":"MergeableArray","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MergeableArray","kind":"identifier"}]},"doc://ForkedMerge/documentation/ForkedMerge":{"abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"title":"ForkedMerge","role":"collection","url":"\/documentation\/forkedmerge","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","kind":"symbol","type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/removingSubranges(_:)":{"type":"topic","abstract":[{"text":"Returns a collection of the elements in this collection that are not","type":"text"},{"type":"text","text":" "},{"text":"represented by the given range set.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/removingSubranges(_:)","url":"\/documentation\/forkedmerge\/mergeablearray\/removingsubranges(_:)","title":"removingSubranges(_:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"removingSubranges","kind":"identifier"},{"kind":"text","text":"("},{"preciseIdentifier":"s:s8RangeSetV","text":"RangeSet","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Index","kind":"typeIdentifier","preciseIdentifier":"s:Sl5IndexQa"},{"text":">) -> ","kind":"text"},{"text":"DiscontiguousSlice","preciseIdentifier":"s:s18DiscontiguousSliceV","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}]}}}