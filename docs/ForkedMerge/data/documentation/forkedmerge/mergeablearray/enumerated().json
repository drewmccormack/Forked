{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"enumerated"},{"text":"() -> ","kind":"text"},{"text":"EnumeratedSequence","kind":"typeIdentifier","preciseIdentifier":"s:s18EnumeratedSequenceV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"platforms":["macOS"],"languages":["swift"]}]},{"kind":"content","content":[{"text":"Return Value","type":"heading","level":2,"anchor":"return-value"},{"inlineContent":[{"type":"text","text":"A sequence of pairs enumerating the sequence."}],"type":"paragraph"}]},{"kind":"content","content":[{"level":2,"type":"heading","text":"Discussion","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example enumerates the characters of the string “Swift” and prints"},{"type":"text","text":" "},{"text":"each character along with its place in the string.","type":"text"}]},{"code":["for (n, c) in \"Swift\".enumerated() {","    print(\"\\(n): '\\(c)'\")","}","\/\/ Prints \"0: 'S'\"","\/\/ Prints \"1: 'w'\"","\/\/ Prints \"2: 'i'\"","\/\/ Prints \"3: 'f'\"","\/\/ Prints \"4: 't'\""],"type":"codeListing","syntax":null},{"type":"paragraph","inlineContent":[{"text":"When you enumerate a collection, the integer part of each pair is a counter","type":"text"},{"type":"text","text":" "},{"text":"for the enumeration, but is not necessarily the index of the paired value.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"These counters can be used as indices only in instances of zero-based,"},{"text":" ","type":"text"},{"type":"text","text":"integer-indexed collections, such as "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" and "},{"type":"codeVoice","code":"ContiguousArray"},{"text":". For","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"other collections the counters may be out of range or of the wrong type"},{"text":" ","type":"text"},{"text":"to use as an index. To iterate over the elements of a collection with its","type":"text"},{"type":"text","text":" "},{"text":"indices, use the ","type":"text"},{"type":"codeVoice","code":"zip(_:_:)"},{"type":"text","text":" function."}]},{"inlineContent":[{"text":"This example iterates over the indices and elements of a set, building a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"list consisting of indices of names with five or fewer letters."}],"type":"paragraph"},{"code":["let names: Set = [\"Sofia\", \"Camilla\", \"Martina\", \"Mateo\", \"Nicolás\"]","var shorterIndices: [Set<String>.Index] = []","for (i, name) in zip(names.indices, names) {","    if name.count <= 5 {","        shorterIndices.append(i)","    }","}"],"type":"codeListing","syntax":null},{"inlineContent":[{"type":"text","text":"Now that the "},{"type":"codeVoice","code":"shorterIndices"},{"text":" array holds the indices of the shorter","type":"text"},{"type":"text","text":" "},{"text":"names in the ","type":"text"},{"type":"codeVoice","code":"names"},{"type":"text","text":" set, you can use those indices to access elements in"},{"type":"text","text":" "},{"type":"text","text":"the set."}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["for i in shorterIndices {","    print(names[i])","}","\/\/ Prints \"Sofia\"","\/\/ Prints \"Mateo\""]},{"type":"aside","style":"note","content":[{"inlineContent":[{"type":"text","text":"O(1)"}],"type":"paragraph"}],"name":"Complexity"}]}],"kind":"symbol","sections":[],"metadata":{"modules":[{"relatedModules":["Swift"],"name":"ForkedMerge"}],"extendedModule":"Swift","role":"symbol","roleHeading":"Instance Method","symbolKind":"method","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"enumerated","kind":"identifier"},{"text":"() -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s18EnumeratedSequenceV","text":"EnumeratedSequence"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"externalID":"s:STsE10enumerateds18EnumeratedSequenceVyxGyF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","title":"enumerated()"},"schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations"]]},"variants":[{"paths":["\/documentation\/forkedmerge\/mergeablearray\/enumerated()"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"type":"text","text":"Returns a sequence of pairs ("},{"inlineContent":[{"text":"n","type":"text"}],"type":"emphasis"},{"type":"text","text":", "},{"inlineContent":[{"type":"text","text":"x"}],"type":"emphasis"},{"text":"), where ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"text":" represents a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"consecutive integer starting at zero and "},{"inlineContent":[{"type":"text","text":"x"}],"type":"emphasis"},{"text":" represents an element of","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the sequence."}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/enumerated()"},"references":{"doc://ForkedMerge/documentation/ForkedMerge":{"url":"\/documentation\/forkedmerge","role":"collection","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","title":"ForkedMerge","kind":"symbol","abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Sequence-Implementations":{"abstract":[],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations","title":"Sequence Implementations","url":"\/documentation\/forkedmerge\/mergeablearray\/sequence-implementations","type":"topic","kind":"article","role":"collectionGroup"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"kind":"symbol","role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","navigatorTitle":[{"text":"MergeableArray","kind":"identifier"}],"title":"MergeableArray","abstract":[{"type":"text","text":"Represents a CRDT for an array of values, such as characters in a string."},{"type":"text","text":" "},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"text":" ","type":"text"},{"type":"text","text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element"},{"type":"text","text":" "},{"text":"may be present. Think about merging changes to text: If the user types the same word on two","type":"text"},{"type":"text","text":" "},{"type":"text","text":"devices at the same time, after the merge, you will have the same word twice — the value is"},{"type":"text","text":" "},{"type":"text","text":"inserted twice, and there is no check that the value already exists in the array."},{"type":"text","text":" "},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"type":"text","text":" "},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"type":"text","text":" "},{"text":"you should dedupe after every merge.","type":"text"},{"type":"text","text":" "},{"text":"This type represents the array internally as a tree, which generally leads to more intuitive merging","type":"text"},{"text":" ","type":"text"},{"text":"of conflicting versions. You could use this as the basis of a basic collaborative editor.","type":"text"},{"type":"text","text":" "},{"text":"Note that it contains a complete history of changes, including deletions, so it grows over time.","type":"text"},{"type":"text","text":" "},{"text":"If you need a more compact representation, consider using a merger instead.","type":"text"}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"MergeableArray"}],"url":"\/documentation\/forkedmerge\/mergeablearray"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/enumerated()":{"kind":"symbol","role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/enumerated()","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"enumerated","kind":"identifier"},{"text":"() -> ","kind":"text"},{"preciseIdentifier":"s:s18EnumeratedSequenceV","text":"EnumeratedSequence","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"type":"topic","title":"enumerated()","abstract":[{"type":"text","text":"Returns a sequence of pairs ("},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"type":"text","text":", "},{"type":"emphasis","inlineContent":[{"type":"text","text":"x"}]},{"type":"text","text":"), where "},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"type":"text","text":" represents a"},{"type":"text","text":" "},{"text":"consecutive integer starting at zero and ","type":"text"},{"inlineContent":[{"type":"text","text":"x"}],"type":"emphasis"},{"type":"text","text":" represents an element of"},{"type":"text","text":" "},{"type":"text","text":"the sequence."}],"url":"\/documentation\/forkedmerge\/mergeablearray\/enumerated()"}}}
