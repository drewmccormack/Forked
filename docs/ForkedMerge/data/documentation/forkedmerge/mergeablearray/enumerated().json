{"schemaVersion":{"patch":0,"major":0,"minor":3},"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"enumerated"},{"text":"() -> ","kind":"text"},{"preciseIdentifier":"s:s18EnumeratedSequenceV","text":"EnumeratedSequence","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"platforms":["macOS"],"languages":["swift"]}]},{"content":[{"anchor":"return-value","type":"heading","text":"Return Value","level":2},{"inlineContent":[{"type":"text","text":"A sequence of pairs enumerating the sequence."}],"type":"paragraph"}],"kind":"content"},{"kind":"content","content":[{"text":"Discussion","level":2,"type":"heading","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"This example enumerates the characters of the string “Swift” and prints","type":"text"},{"text":" ","type":"text"},{"text":"each character along with its place in the string.","type":"text"}]},{"type":"codeListing","code":["for (n, c) in \"Swift\".enumerated() {","    print(\"\\(n): '\\(c)'\")","}","\/\/ Prints \"0: 'S'\"","\/\/ Prints \"1: 'w'\"","\/\/ Prints \"2: 'i'\"","\/\/ Prints \"3: 'f'\"","\/\/ Prints \"4: 't'\""],"syntax":null},{"inlineContent":[{"text":"When you enumerate a collection, the integer part of each pair is a counter","type":"text"},{"type":"text","text":" "},{"text":"for the enumeration, but is not necessarily the index of the paired value.","type":"text"},{"type":"text","text":" "},{"text":"These counters can be used as indices only in instances of zero-based,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"integer-indexed collections, such as "},{"type":"codeVoice","code":"Array"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"ContiguousArray"},{"type":"text","text":". For"},{"type":"text","text":" "},{"type":"text","text":"other collections the counters may be out of range or of the wrong type"},{"type":"text","text":" "},{"text":"to use as an index. To iterate over the elements of a collection with its","type":"text"},{"type":"text","text":" "},{"type":"text","text":"indices, use the "},{"type":"codeVoice","code":"zip(_:_:)"},{"text":" function.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This example iterates over the indices and elements of a set, building a","type":"text"},{"type":"text","text":" "},{"text":"list consisting of indices of names with five or fewer letters.","type":"text"}]},{"type":"codeListing","syntax":null,"code":["let names: Set = [\"Sofia\", \"Camilla\", \"Martina\", \"Mateo\", \"Nicolás\"]","var shorterIndices: [Set<String>.Index] = []","for (i, name) in zip(names.indices, names) {","    if name.count <= 5 {","        shorterIndices.append(i)","    }","}"]},{"inlineContent":[{"type":"text","text":"Now that the "},{"type":"codeVoice","code":"shorterIndices"},{"text":" array holds the indices of the shorter","type":"text"},{"text":" ","type":"text"},{"text":"names in the ","type":"text"},{"type":"codeVoice","code":"names"},{"type":"text","text":" set, you can use those indices to access elements in"},{"type":"text","text":" "},{"text":"the set.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["for i in shorterIndices {","    print(names[i])","}","\/\/ Prints \"Sofia\"","\/\/ Prints \"Mateo\""]},{"name":"Complexity","style":"note","content":[{"inlineContent":[{"type":"text","text":"O(1)"}],"type":"paragraph"}],"type":"aside"}]}],"variants":[{"paths":["\/documentation\/forkedmerge\/mergeablearray\/enumerated()"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray"]]},"abstract":[{"type":"text","text":"Returns a sequence of pairs ("},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"type":"text","text":", "},{"inlineContent":[{"type":"text","text":"x"}],"type":"emphasis"},{"type":"text","text":"), where "},{"inlineContent":[{"text":"n","type":"text"}],"type":"emphasis"},{"type":"text","text":" represents a"},{"text":" ","type":"text"},{"text":"consecutive integer starting at zero and ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"x"}]},{"text":" represents an element of","type":"text"},{"text":" ","type":"text"},{"text":"the sequence.","type":"text"}],"metadata":{"title":"enumerated()","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"enumerated","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"EnumeratedSequence","preciseIdentifier":"s:s18EnumeratedSequenceV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}],"modules":[{"relatedModules":["Swift"],"name":"ForkedMerge"}],"externalID":"s:STsE10enumerateds18EnumeratedSequenceVyxGyF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","extendedModule":"Swift","symbolKind":"method","role":"symbol","roleHeading":"Instance Method"},"sections":[],"identifier":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/enumerated()","interfaceLanguage":"swift"},"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"kind":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray","role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"MergeableArray","kind":"identifier"}],"navigatorTitle":[{"text":"MergeableArray","kind":"identifier"}],"abstract":[{"type":"text","text":"Represents a CRDT for an array of values, such as characters in a string."},{"type":"text","text":" "},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"type":"text","text":" "},{"type":"text","text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element"},{"text":" ","type":"text"},{"text":"may be present. Think about merging changes to text: If the user types the same word on two","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"devices at the same time, after the merge, you will have the same word twice — the value is"},{"text":" ","type":"text"},{"type":"text","text":"inserted twice, and there is no check that the value already exists in the array."},{"type":"text","text":" "},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"text":" ","type":"text"},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"type":"text","text":" "},{"text":"you should dedupe after every merge.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This type represents the array internally as a tree, which generally leads to more intuitive merging"},{"text":" ","type":"text"},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"type":"text","text":" "},{"text":"Note that it contains a complete history of changes, including deletions, so it grows over time.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"title":"MergeableArray","type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/enumerated()":{"kind":"symbol","type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/enumerated()","url":"\/documentation\/forkedmerge\/mergeablearray\/enumerated()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"enumerated","kind":"identifier"},{"text":"() -> ","kind":"text"},{"kind":"typeIdentifier","text":"EnumeratedSequence","preciseIdentifier":"s:s18EnumeratedSequenceV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"title":"enumerated()","abstract":[{"type":"text","text":"Returns a sequence of pairs ("},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"type":"text","text":", "},{"type":"emphasis","inlineContent":[{"type":"text","text":"x"}]},{"text":"), where ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"type":"text","text":" represents a"},{"type":"text","text":" "},{"text":"consecutive integer starting at zero and ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"x","type":"text"}]},{"type":"text","text":" represents an element of"},{"text":" ","type":"text"},{"type":"text","text":"the sequence."}],"role":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge":{"abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"type":"topic","kind":"symbol","title":"ForkedMerge","role":"collection","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","url":"\/documentation\/forkedmerge"}}}