{"variants":[{"paths":["\/documentation\/forkedmerge"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"kind":"symbol","schemaVersion":{"patch":0,"major":0,"minor":3},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge"},"metadata":{"role":"collection","title":"ForkedMerge","externalID":"ForkedMerge","roleHeading":"Framework","modules":[{"name":"ForkedMerge"}],"symbolKind":"module"},"primaryContentSections":[{"kind":"content","content":[{"level":2,"type":"heading","anchor":"Overview","text":"Overview"},{"inlineContent":[{"type":"text","text":"ForkedMerge provides the core functionality for merging divergent data structures back into a consistent state."}],"type":"paragraph"}]}],"hierarchy":{"paths":[[]]},"topicSections":[{"generated":true,"anchor":"Protocols","title":"Protocols","identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/Merger"]},{"identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayMerger","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/DictionaryMerger","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableDictionary","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableSet","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableValue","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/SetMerger","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/TextMerger"],"generated":true,"title":"Structures","anchor":"Structures"},{"identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/merge(withMergerType:dominant:subordinate:commonAncestor:)-18fwy","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/merge(withMergerType:dominant:subordinate:commonAncestor:)-8vogx"],"generated":true,"anchor":"Functions","title":"Functions"},{"title":"Enumerations","identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyBacking","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge"],"anchor":"Enumerations","generated":true}],"abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"references":{"doc://ForkedMerge/documentation/ForkedMerge/Merger":{"kind":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/Merger","type":"topic","abstract":[{"type":"text","text":"A merger is a type that applies a merging algorithm to merge two values together."},{"text":" ","type":"text"},{"type":"text","text":"The values are typically of a simple type. The algorithm could be anything, from a"},{"text":" ","type":"text"},{"type":"text","text":"simple most recent edit wins, to more advanced CRDT based approaches that use"},{"type":"text","text":" "},{"type":"text","text":"diffing against a common ancestor."}],"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Merger","kind":"identifier"}],"url":"\/documentation\/forkedmerge\/merger","navigatorTitle":[{"text":"Merger","kind":"identifier"}],"title":"Merger"},"doc://ForkedMerge/documentation/ForkedMerge/merge(withMergerType:dominant:subordinate:commonAncestor:)-18fwy":{"url":"\/documentation\/forkedmerge\/merge(withmergertype:dominant:subordinate:commonancestor:)-18fwy","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"merge"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"M"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"withMergerType"},{"kind":"text","text":": "},{"text":"M","kind":"typeIdentifier"},{"text":".Type, ","kind":"text"},{"kind":"externalParam","text":"dominant"},{"kind":"text","text":": "},{"text":"M","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11ForkedMerge6MergerP1TQa","text":"T"},{"kind":"text","text":", "},{"kind":"externalParam","text":"subordinate"},{"kind":"text","text":": "},{"text":"M","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11ForkedMerge6MergerP1TQa","text":"T"},{"kind":"text","text":", "},{"kind":"externalParam","text":"commonAncestor"},{"text":": ","kind":"text"},{"text":"M","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"T","preciseIdentifier":"s:11ForkedMerge6MergerP1TQa"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"M","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11ForkedMerge6MergerP1TQa","text":"T"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/merge(withMergerType:dominant:subordinate:commonAncestor:)-18fwy","title":"merge(withMergerType:dominant:subordinate:commonAncestor:)","role":"symbol","type":"topic","abstract":[]},"doc://ForkedMerge/documentation/ForkedMerge/SetMerger":{"url":"\/documentation\/forkedmerge\/setmerger","kind":"symbol","navigatorTitle":[{"text":"SetMerger","kind":"identifier"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/SetMerger","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"SetMerger"}],"title":"SetMerger","role":"symbol","type":"topic","abstract":[{"text":"Merges an array by treating the contained elements as values.","type":"text"}]},"doc://ForkedMerge/documentation/ForkedMerge/DictionaryMerger":{"navigatorTitle":[{"text":"DictionaryMerger","kind":"identifier"}],"abstract":[{"text":"Merges an array by treating the contained elements as values.","type":"text"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/DictionaryMerger","title":"DictionaryMerger","kind":"symbol","url":"\/documentation\/forkedmerge\/dictionarymerger","role":"symbol","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"DictionaryMerger"}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"kind":"symbol","role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","navigatorTitle":[{"text":"MergeableArray","kind":"identifier"}],"title":"MergeableArray","abstract":[{"type":"text","text":"Represents a CRDT for an array of values, such as characters in a string."},{"type":"text","text":" "},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"text":" ","type":"text"},{"type":"text","text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element"},{"type":"text","text":" "},{"text":"may be present. Think about merging changes to text: If the user types the same word on two","type":"text"},{"type":"text","text":" "},{"type":"text","text":"devices at the same time, after the merge, you will have the same word twice â€” the value is"},{"type":"text","text":" "},{"type":"text","text":"inserted twice, and there is no check that the value already exists in the array."},{"type":"text","text":" "},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"type":"text","text":" "},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"type":"text","text":" "},{"text":"you should dedupe after every merge.","type":"text"},{"type":"text","text":" "},{"text":"This type represents the array internally as a tree, which generally leads to more intuitive merging","type":"text"},{"text":" ","type":"text"},{"text":"of conflicting versions. You could use this as the basis of a basic collaborative editor.","type":"text"},{"type":"text","text":" "},{"text":"Note that it contains a complete history of changes, including deletions, so it grows over time.","type":"text"},{"type":"text","text":" "},{"text":"If you need a more compact representation, consider using a merger instead.","type":"text"}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"MergeableArray"}],"url":"\/documentation\/forkedmerge\/mergeablearray"},"doc://ForkedMerge/documentation/ForkedMerge":{"url":"\/documentation\/forkedmerge","role":"collection","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","title":"ForkedMerge","kind":"symbol","abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/TextMerger":{"navigatorTitle":[{"text":"TextMerger","kind":"identifier"}],"abstract":[],"kind":"symbol","url":"\/documentation\/forkedmerge\/textmerger","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/TextMerger","type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"TextMerger"}],"title":"TextMerger"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge":{"url":"\/documentation\/forkedmerge\/propertymerge","role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge","navigatorTitle":[{"text":"PropertyMerge","kind":"identifier"}],"title":"PropertyMerge","kind":"symbol","abstract":[{"type":"text","text":"The algorithm used to merge changes to a property."},{"type":"text","text":" "},{"text":"Some properties know how to merge themselves; they conform to ","type":"text"},{"code":"Mergeable","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"Other types have no intrinsic merge, but can be merged by a ","type":"text"},{"type":"codeVoice","code":"Merger"},{"type":"text","text":"."}],"type":"topic","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"PropertyMerge"}]},"doc://ForkedMerge/documentation/ForkedMerge/ArrayOfIdentifiableMerger":{"abstract":[{"text":"Merges an array, ensuring that the result has elements with unqiue identifiers.","type":"text"}],"role":"symbol","url":"\/documentation\/forkedmerge\/arrayofidentifiablemerger","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ArrayOfIdentifiableMerger"}],"type":"topic","title":"ArrayOfIdentifiableMerger","kind":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger","navigatorTitle":[{"text":"ArrayOfIdentifiableMerger","kind":"identifier"}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableDictionary":{"title":"MergeableDictionary","type":"topic","kind":"symbol","role":"symbol","abstract":[{"text":"Represents a mergable type for a dictionary of values.","type":"text"},{"text":" ","type":"text"},{"text":"Uses a CRDT algorithm.","type":"text"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableDictionary","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"MergeableDictionary","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"MergeableDictionary"}],"url":"\/documentation\/forkedmerge\/mergeabledictionary"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyBacking":{"title":"PropertyBacking","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PropertyBacking","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"PropertyBacking"}],"kind":"symbol","abstract":[{"text":"The storage used for a property. These storage types have built in","type":"text"},{"type":"text","text":" "},{"text":"systems for merging. They maintain the information they need (eg history)","type":"text"},{"type":"text","text":" "},{"text":"to properly merge even if with copies that have conflicting changes.","type":"text"}],"type":"topic","url":"\/documentation\/forkedmerge\/propertybacking","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyBacking"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableValue":{"url":"\/documentation\/forkedmerge\/mergeablevalue","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableValue","abstract":[{"text":"Implements Last-Writer-Wins Register. Whenever the contained value is updated, it stores a timestamp with it.","type":"text"},{"type":"text","text":" "},{"text":"This allows the type to automatically merge simply by choosing the value that was written later.","type":"text"},{"type":"text","text":" "},{"text":"Because there is a chance of timestamp collisions, a UUID is included to make collisions extremely unlikely.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Based on Convergent and commutative replicated data types by M Shapiro, N PreguiÃ§a, C Baquero, M Zawirski - 2011 - hal.inria.fr"}],"kind":"symbol","type":"topic","title":"MergeableValue","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"MergeableValue","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"MergeableValue","kind":"identifier"}]},"doc://ForkedMerge/documentation/ForkedMerge/ArrayMerger":{"url":"\/documentation\/forkedmerge\/arraymerger","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ArrayMerger"}],"abstract":[{"text":"Merges an array by treating the contained elements as values.","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"ArrayMerger","kind":"identifier"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayMerger","role":"symbol","title":"ArrayMerger","type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableSet":{"title":"MergeableSet","role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableSet","navigatorTitle":[{"text":"MergeableSet","kind":"identifier"}],"abstract":[{"text":"Observed-Remove Set. Can add and remove like a normal set.","type":"text"},{"type":"text","text":" "},{"text":"Based on Convergent and commutative replicated data types by M Shapiro, N PreguiÃ§a, C Baquero, M Zawirski - 2011 - hal.inria.fr","type":"text"}],"type":"topic","url":"\/documentation\/forkedmerge\/mergeableset","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"MergeableSet","kind":"identifier"}]},"doc://ForkedMerge/documentation/ForkedMerge/merge(withMergerType:dominant:subordinate:commonAncestor:)-8vogx":{"title":"merge(withMergerType:dominant:subordinate:commonAncestor:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"merge"},{"kind":"text","text":"<"},{"text":"M","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"withMergerType"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"M"},{"text":".Type, ","kind":"text"},{"kind":"externalParam","text":"dominant"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"M"},{"text":".","kind":"text"},{"text":"T","kind":"typeIdentifier","preciseIdentifier":"s:11ForkedMerge6MergerP1TQa"},{"kind":"text","text":"?, "},{"text":"subordinate","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"M"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:11ForkedMerge6MergerP1TQa","text":"T"},{"kind":"text","text":"?, "},{"text":"commonAncestor","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"M"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:11ForkedMerge6MergerP1TQa","text":"T"},{"text":"?) ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"M","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:11ForkedMerge6MergerP1TQa","text":"T","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"url":"\/documentation\/forkedmerge\/merge(withmergertype:dominant:subordinate:commonancestor:)-8vogx","type":"topic","abstract":[],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/merge(withMergerType:dominant:subordinate:commonAncestor:)-8vogx","role":"symbol","kind":"symbol"}}}
