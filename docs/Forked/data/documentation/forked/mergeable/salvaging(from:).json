{"primaryContentSections":[{"declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"salvaging","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"from"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"other"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Self"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"kind":"content","content":[{"text":"Discussion","type":"heading","anchor":"discussion","level":2},{"inlineContent":[{"type":"text","text":"That’s a lot of introduction, but it sets up this function. This function is effectively"},{"type":"text","text":" "},{"text":"a 2-way merge. By default, it just returns ","type":"text"},{"type":"codeVoice","code":"self"},{"type":"text","text":", which is considered the dominant"},{"type":"text","text":" "},{"type":"text","text":"copy of the data. But if you need special handling to bootstrap, you can “salvage”"},{"type":"text","text":" "},{"type":"text","text":"data from "},{"type":"codeVoice","code":"other"},{"type":"text","text":" and merge it in. It is even possible to setup a 3-way merge"},{"type":"text","text":" "},{"type":"text","text":"where you construct an initial value and use that as the common ancestor, but"},{"type":"text","text":" "},{"text":"this may not work well for all properties. Often a combination of approaches is best","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for salvaging, eg, starting with a 3-way merge against the initial value, and then"},{"text":" ","type":"text"},{"type":"text","text":"copying in properties from "},{"type":"codeVoice","code":"self"},{"type":"text","text":" where this 3-way merge doesn’t do what you"},{"text":" ","type":"text"},{"type":"text","text":"want."}],"type":"paragraph"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forked\/mergeable\/salvaging(from:)"]}],"defaultImplementationsSections":[{"anchor":"Mergeable-Implementations","title":"Mergeable Implementations","identifiers":["doc:\/\/Forked\/documentation\/Forked\/Mergeable\/salvaging(from:)-3p5f"]}],"sections":[],"abstract":[{"type":"text","text":"In general, 3-way merges are used in Forked. But when bootstrapping,"},{"type":"text","text":" "},{"text":"there can be times when no common ancestor exists. Effectively we have","type":"text"},{"type":"text","text":" "},{"text":"to merge together unrelated values. For example, if you install an app on","type":"text"},{"type":"text","text":" "},{"type":"text","text":"two offline devices, insert some data on each, and then take them online to"},{"type":"text","text":" "},{"type":"text","text":"sync. In this scenario, there is no common ancestor,"},{"type":"text","text":" "},{"type":"text","text":"but it would be nice to keep the data entered on each device."},{"text":" ","type":"text"},{"text":"An even trickier case arises if two devices are fully synced up, but then the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"cloud data is reset. Effectively, the two data sets are now unrelated, and if you"},{"type":"text","text":" "},{"type":"text","text":"start them syncing again, the history relating them is lost, and there is no common"},{"type":"text","text":" "},{"type":"text","text":"ancestor. You can choose one or the other, but just blindly merging the two will"},{"type":"text","text":" "},{"type":"text","text":"lead to duplications (how often have we seen that in apps like Contacts?)"}],"metadata":{"required":true,"symbolKind":"method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"salvaging","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"from"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"role":"symbol","externalID":"s:6Forked9MergeableP9salvaging4fromxx_tKF","roleHeading":"Instance Method","modules":[{"name":"Forked"}],"title":"salvaging(from:)"},"kind":"symbol","schemaVersion":{"minor":3,"major":0,"patch":0},"identifier":{"url":"doc:\/\/Forked\/documentation\/Forked\/Mergeable\/salvaging(from:)","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/Forked\/documentation\/Forked","doc:\/\/Forked\/documentation\/Forked\/Mergeable"]]},"references":{"doc://Forked/documentation/Forked":{"title":"Forked","url":"\/documentation\/forked","abstract":[{"text":"A framework for handling shared data with confidence in Swift.","type":"text"}],"kind":"symbol","role":"collection","type":"topic","identifier":"doc:\/\/Forked\/documentation\/Forked"},"doc://Forked/documentation/Forked/Mergeable/salvaging(from:)-3p5f":{"identifier":"doc:\/\/Forked\/documentation\/Forked\/Mergeable\/salvaging(from:)-3p5f","abstract":[],"title":"salvaging(from:)","type":"topic","kind":"symbol","url":"\/documentation\/forked\/mergeable\/salvaging(from:)-3p5f","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"salvaging"},{"kind":"text","text":"("},{"text":"from","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"}],"role":"symbol"},"doc://Forked/documentation/Forked/Mergeable/salvaging(from:)":{"required":true,"url":"\/documentation\/forked\/mergeable\/salvaging(from:)","identifier":"doc:\/\/Forked\/documentation\/Forked\/Mergeable\/salvaging(from:)","abstract":[{"type":"text","text":"In general, 3-way merges are used in Forked. But when bootstrapping,"},{"type":"text","text":" "},{"text":"there can be times when no common ancestor exists. Effectively we have","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to merge together unrelated values. For example, if you install an app on"},{"type":"text","text":" "},{"text":"two offline devices, insert some data on each, and then take them online to","type":"text"},{"type":"text","text":" "},{"text":"sync. In this scenario, there is no common ancestor,","type":"text"},{"text":" ","type":"text"},{"text":"but it would be nice to keep the data entered on each device.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"An even trickier case arises if two devices are fully synced up, but then the"},{"type":"text","text":" "},{"type":"text","text":"cloud data is reset. Effectively, the two data sets are now unrelated, and if you"},{"type":"text","text":" "},{"type":"text","text":"start them syncing again, the history relating them is lost, and there is no common"},{"type":"text","text":" "},{"type":"text","text":"ancestor. You can choose one or the other, but just blindly merging the two will"},{"type":"text","text":" "},{"type":"text","text":"lead to duplications (how often have we seen that in apps like Contacts?)"}],"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"salvaging","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"from"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"defaultImplementations":1,"type":"topic","title":"salvaging(from:)","kind":"symbol"},"doc://Forked/documentation/Forked/Mergeable":{"identifier":"doc:\/\/Forked\/documentation\/Forked\/Mergeable","abstract":[{"text":"Any type conforming to this can be used in a 3-way merge","type":"text"}],"title":"Mergeable","type":"topic","kind":"symbol","url":"\/documentation\/forked\/mergeable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Mergeable"}],"navigatorTitle":[{"text":"Mergeable","kind":"identifier"}],"role":"symbol"}}}