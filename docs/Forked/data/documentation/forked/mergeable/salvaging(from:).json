{"metadata":{"externalID":"s:6Forked9MergeableP9salvaging4fromxx_tKF","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"salvaging"},{"kind":"text","text":"("},{"text":"from","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"role":"symbol","title":"salvaging(from:)","required":true,"modules":[{"name":"Forked"}],"roleHeading":"Instance Method","symbolKind":"method"},"schemaVersion":{"patch":0,"minor":3,"major":0},"sections":[],"kind":"symbol","abstract":[{"type":"text","text":"In general, 3-way merges are used in Forked. But when bootstrapping,"},{"type":"text","text":" "},{"text":"there can be times when no common ancestor exists. Effectively we have","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to merge together unrelated values. For example, if you install an app on"},{"text":" ","type":"text"},{"type":"text","text":"two offline devices, insert some data on each, and then take them online to"},{"text":" ","type":"text"},{"type":"text","text":"sync. In this scenario, there is no common ancestor,"},{"text":" ","type":"text"},{"text":"but it would be nice to keep the data entered on each device.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"An even trickier case arises if two devices are fully synced up, but then the"},{"type":"text","text":" "},{"text":"cloud data is reset. Effectively, the two data sets are now unrelated, and if you","type":"text"},{"text":" ","type":"text"},{"text":"start them syncing again, the history relating them is lost, and there is no common","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"ancestor. You can choose one or the other, but just blindly merging the two will"},{"type":"text","text":" "},{"type":"text","text":"lead to duplications (how often have we seen that in apps like Contacts?)"}],"hierarchy":{"paths":[["doc:\/\/Forked\/documentation\/Forked","doc:\/\/Forked\/documentation\/Forked\/Mergeable"]]},"defaultImplementationsSections":[{"title":"Mergeable Implementations","identifiers":["doc:\/\/Forked\/documentation\/Forked\/Mergeable\/salvaging(from:)-3p5f"],"anchor":"Mergeable-Implementations"}],"variants":[{"paths":["\/documentation\/forked\/mergeable\/salvaging(from:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Forked\/documentation\/Forked\/Mergeable\/salvaging(from:)","interfaceLanguage":"swift"},"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"salvaging","kind":"identifier"},{"text":"(","kind":"text"},{"text":"from","kind":"externalParam"},{"kind":"text","text":" "},{"text":"other","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"}]}],"kind":"declarations"},{"kind":"content","content":[{"level":2,"text":"Discussion","type":"heading","anchor":"discussion"},{"inlineContent":[{"text":"That’s a lot of introduction, but it sets up this function. This function is effectively","type":"text"},{"type":"text","text":" "},{"text":"a 2-way merge. By default, it just returns ","type":"text"},{"type":"codeVoice","code":"self"},{"type":"text","text":", which is considered the dominant"},{"type":"text","text":" "},{"type":"text","text":"copy of the data. But if you need special handling to bootstrap, you can “salvage”"},{"text":" ","type":"text"},{"type":"text","text":"data from "},{"code":"other","type":"codeVoice"},{"type":"text","text":" and merge it in. It is even possible to setup a 3-way merge"},{"text":" ","type":"text"},{"type":"text","text":"where you construct an initial value and use that as the common ancestor, but"},{"text":" ","type":"text"},{"type":"text","text":"this may not work well for all properties. Often a combination of approaches is best"},{"text":" ","type":"text"},{"text":"for salvaging, eg, starting with a 3-way merge against the initial value, and then","type":"text"},{"type":"text","text":" "},{"type":"text","text":"copying in properties from "},{"type":"codeVoice","code":"self"},{"type":"text","text":" where this 3-way merge doesn’t do what you"},{"type":"text","text":" "},{"text":"want.","type":"text"}],"type":"paragraph"}]}],"references":{"doc://Forked/documentation/Forked/Mergeable/salvaging(from:)":{"required":true,"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"salvaging","kind":"identifier"},{"text":"(","kind":"text"},{"text":"from","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"Self","kind":"typeIdentifier"}],"title":"salvaging(from:)","role":"symbol","type":"topic","abstract":[{"text":"In general, 3-way merges are used in Forked. But when bootstrapping,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"there can be times when no common ancestor exists. Effectively we have"},{"text":" ","type":"text"},{"type":"text","text":"to merge together unrelated values. For example, if you install an app on"},{"type":"text","text":" "},{"type":"text","text":"two offline devices, insert some data on each, and then take them online to"},{"text":" ","type":"text"},{"text":"sync. In this scenario, there is no common ancestor,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"but it would be nice to keep the data entered on each device."},{"text":" ","type":"text"},{"text":"An even trickier case arises if two devices are fully synced up, but then the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"cloud data is reset. Effectively, the two data sets are now unrelated, and if you"},{"text":" ","type":"text"},{"type":"text","text":"start them syncing again, the history relating them is lost, and there is no common"},{"text":" ","type":"text"},{"text":"ancestor. You can choose one or the other, but just blindly merging the two will","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"lead to duplications (how often have we seen that in apps like Contacts?)"}],"kind":"symbol","identifier":"doc:\/\/Forked\/documentation\/Forked\/Mergeable\/salvaging(from:)","defaultImplementations":1,"url":"\/documentation\/forked\/mergeable\/salvaging(from:)"},"doc://Forked/documentation/Forked":{"identifier":"doc:\/\/Forked\/documentation\/Forked","kind":"symbol","type":"topic","role":"collection","title":"Forked","url":"\/documentation\/forked","abstract":[{"type":"text","text":"A framework for handling shared data with confidence in Swift."}]},"doc://Forked/documentation/Forked/Mergeable":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Mergeable","kind":"identifier"}],"title":"Mergeable","kind":"symbol","identifier":"doc:\/\/Forked\/documentation\/Forked\/Mergeable","role":"symbol","abstract":[{"type":"text","text":"Any type conforming to this can be used in a 3-way merge"}],"navigatorTitle":[{"text":"Mergeable","kind":"identifier"}],"url":"\/documentation\/forked\/mergeable","type":"topic"},"doc://Forked/documentation/Forked/Mergeable/salvaging(from:)-3p5f":{"url":"\/documentation\/forked\/mergeable\/salvaging(from:)-3p5f","role":"symbol","kind":"symbol","title":"salvaging(from:)","abstract":[],"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"salvaging","kind":"identifier"},{"text":"(","kind":"text"},{"text":"from","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"identifier":"doc:\/\/Forked\/documentation\/Forked\/Mergeable\/salvaging(from:)-3p5f"}}}