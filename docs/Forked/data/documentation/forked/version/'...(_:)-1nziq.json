{"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"..."},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"text":"maximum","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"PartialRangeThrough","preciseIdentifier":"s:s19PartialRangeThroughV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"maximum","content":[{"inlineContent":[{"text":"The upper bound for the range.","type":"text"}],"type":"paragraph"}]}]},{"content":[{"text":"Discussion","type":"heading","anchor":"discussion","level":2},{"inlineContent":[{"text":"Use the prefix closed range operator (prefix ","type":"text"},{"type":"codeVoice","code":"..."},{"type":"text","text":") to create a partial"},{"text":" ","type":"text"},{"text":"range of any type that conforms to the ","type":"text"},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":" protocol. This"},{"type":"text","text":" "},{"type":"text","text":"example creates a "},{"code":"PartialRangeThrough<Double>","type":"codeVoice"},{"type":"text","text":" instance that includes"},{"type":"text","text":" "},{"type":"text","text":"any value less than or equal to "},{"code":"5.0","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"code":["let throughFive = ...5.0","","throughFive.contains(4.0)     \/\/ true","throughFive.contains(5.0)     \/\/ true","throughFive.contains(6.0)     \/\/ false"],"type":"codeListing","syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use this type of partial range of a collection’s indices to"},{"type":"text","text":" "},{"type":"text","text":"represent the range from the start of the collection up to, and"},{"text":" ","type":"text"},{"type":"text","text":"including, the partial range’s upper bound."}]},{"type":"codeListing","syntax":null,"code":["let numbers = [10, 20, 30, 40, 50, 60, 70]","print(numbers[...3])","\/\/ Prints \"[10, 20, 30, 40]\""]},{"name":"Precondition","type":"aside","style":"note","content":[{"inlineContent":[{"type":"text","text":""},{"code":"maximum","type":"codeVoice"},{"text":" must compare equal to itself (i.e. cannot be NaN).","type":"text"}],"type":"paragraph"}]}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/Forked\/documentation\/Forked","doc:\/\/Forked\/documentation\/Forked\/Version"]]},"identifier":{"url":"doc:\/\/Forked\/documentation\/Forked\/Version\/...(_:)-1nziq","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Returns a partial range up to, and including, its upper bound."}],"variants":[{"paths":["\/documentation\/forked\/version\/'...(_:)-1nziq"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"metadata":{"role":"symbol","extendedModule":"Swift","roleHeading":"Operator","title":"...(_:)","externalID":"s:SLsE3zzzopys19PartialRangeThroughVyxGxFZ::SYNTHESIZED::s:6Forked7VersionV","modules":[{"relatedModules":["Swift"],"name":"Forked"}],"fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"..."},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"PartialRangeThrough","preciseIdentifier":"s:s19PartialRangeThroughV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"symbolKind":"op"},"schemaVersion":{"minor":3,"major":0,"patch":0},"kind":"symbol","references":{"doc://Forked/documentation/Forked/Version":{"kind":"symbol","type":"topic","identifier":"doc:\/\/Forked\/documentation\/Forked\/Version","abstract":[{"text":"Used to chronologically order file versions. It is a standard lamport count.","type":"text"}],"url":"\/documentation\/forked\/version","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Version","kind":"identifier"}],"navigatorTitle":[{"text":"Version","kind":"identifier"}],"title":"Version","role":"symbol"},"doc://Forked/documentation/Forked":{"title":"Forked","url":"\/documentation\/forked","abstract":[{"text":"A framework for handling shared data with confidence in Swift.","type":"text"}],"kind":"symbol","role":"collection","type":"topic","identifier":"doc:\/\/Forked\/documentation\/Forked"},"doc://Forked/documentation/Forked/Version/...(_:)-1nziq":{"url":"\/documentation\/forked\/version\/'...(_:)-1nziq","abstract":[{"type":"text","text":"Returns a partial range up to, and including, its upper bound."}],"identifier":"doc:\/\/Forked\/documentation\/Forked\/Version\/...(_:)-1nziq","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"...","kind":"identifier"},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"PartialRangeThrough","preciseIdentifier":"s:s19PartialRangeThroughV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"title":"...(_:)","type":"topic","kind":"symbol"}}}