{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Version\/...(_:)-1nziq"},"sections":[],"metadata":{"symbolKind":"op","roleHeading":"Operator","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"...","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":") -> ","kind":"text"},{"text":"PartialRangeThrough","kind":"typeIdentifier","preciseIdentifier":"s:s19PartialRangeThroughV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}],"externalID":"s:SLsE3zzzopys19PartialRangeThroughVyxGxFZ::SYNTHESIZED::s:6Forked7VersionV","modules":[{"name":"Forked","relatedModules":["Swift"]}],"extendedModule":"Swift","role":"symbol","title":"...(_:)"},"abstract":[{"text":"Returns a partial range up to, and including, its upper bound.","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forked\/version\/'...(_:)-1nziq"]}],"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"...","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"kind":"internalParam","text":"maximum"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:s19PartialRangeThroughV","kind":"typeIdentifier","text":"PartialRangeThrough"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}],"platforms":["macOS"]}]},{"parameters":[{"name":"maximum","content":[{"inlineContent":[{"type":"text","text":"The upper bound for the range."}],"type":"paragraph"}]}],"kind":"parameters"},{"kind":"content","content":[{"level":2,"anchor":"discussion","type":"heading","text":"Discussion"},{"inlineContent":[{"text":"Use the prefix closed range operator (prefix ","type":"text"},{"type":"codeVoice","code":"..."},{"type":"text","text":") to create a partial"},{"type":"text","text":" "},{"text":"range of any type that conforms to the ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"text":" protocol. This","type":"text"},{"type":"text","text":" "},{"type":"text","text":"example creates a "},{"code":"PartialRangeThrough<Double>","type":"codeVoice"},{"type":"text","text":" instance that includes"},{"type":"text","text":" "},{"text":"any value less than or equal to ","type":"text"},{"type":"codeVoice","code":"5.0"},{"type":"text","text":"."}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["let throughFive = ...5.0","","throughFive.contains(4.0)     \/\/ true","throughFive.contains(5.0)     \/\/ true","throughFive.contains(6.0)     \/\/ false"]},{"inlineContent":[{"text":"You can use this type of partial range of a collection’s indices to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"represent the range from the start of the collection up to, and"},{"type":"text","text":" "},{"text":"including, the partial range’s upper bound.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["let numbers = [10, 20, 30, 40, 50, 60, 70]","print(numbers[...3])","\/\/ Prints \"[10, 20, 30, 40]\""]},{"type":"aside","style":"note","content":[{"inlineContent":[{"text":"","type":"text"},{"code":"maximum","type":"codeVoice"},{"type":"text","text":" must compare equal to itself (i.e. cannot be NaN)."}],"type":"paragraph"}],"name":"Precondition"}]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/Forked\/documentation\/Forked","doc:\/\/Forked\/documentation\/Forked\/Version"]]},"references":{"doc://Forked/documentation/Forked/Version/...(_:)-1nziq":{"url":"\/documentation\/forked\/version\/'...(_:)-1nziq","title":"...(_:)","type":"topic","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"..."},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"PartialRangeThrough","kind":"typeIdentifier","preciseIdentifier":"s:s19PartialRangeThroughV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/Forked\/documentation\/Forked\/Version\/...(_:)-1nziq","abstract":[{"text":"Returns a partial range up to, and including, its upper bound.","type":"text"}]},"doc://Forked/documentation/Forked":{"identifier":"doc:\/\/Forked\/documentation\/Forked","kind":"symbol","type":"topic","role":"collection","title":"Forked","url":"\/documentation\/forked","abstract":[{"type":"text","text":"A framework for handling shared data with confidence in Swift."}]},"doc://Forked/documentation/Forked/Version":{"abstract":[{"text":"Used to chronologically order file versions. It is a standard lamport count.","type":"text"}],"role":"symbol","url":"\/documentation\/forked\/version","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Version"}],"navigatorTitle":[{"text":"Version","kind":"identifier"}],"identifier":"doc:\/\/Forked\/documentation\/Forked\/Version","kind":"symbol","type":"topic","title":"Version"}}}